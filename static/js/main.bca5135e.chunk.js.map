{"version":3,"sources":["PageFlip/Page/Page.ts","ImageBook/Page/Page.jsx","ImageBook/ImageBook.jsx","reportWebVitals.js","PageFlip/Flip/Flip.ts","PageFlip/Page/ImagePage.ts","PageFlip/Helper.ts","PageFlip/Flip/FlipCalculation.ts","PageFlip/Settings.ts","PageFlip/Render/Render.ts","PageFlip/Collection/PageCollection.ts","PageFlip/Collection/ImagePageCollection.ts","PageFlip/Page/HTMLPage.ts","PageFlip/Collection/HTMLPageCollection.ts","PageFlip/Render/CanvasRender.ts","PageFlip/UI/UI.ts","PageFlip/UI/HTMLUI.ts","PageFlip/UI/CanvasUI.ts","PageFlip/Event/EventObject.ts","PageFlip/Render/HTMLRender.ts","PageFlip/PageFlip.ts","PageFlip/react-pageflip.js","DemoBlock.jsx","index.js"],"names":["PageOrientation","PageDensity","PageCover","React","forwardRef","props","ref","className","pos","data-density","bookmark","src","process","style","filter","alt","title","onClick","onBookmark","children","Page","pageClass","no_animation","density","undefined","pageTitle","image","imageCaption","e","console","log","target","requestFullscreen","then","onLoad","width","height","isNaN","pageNumber","ImageBook","nextButtonClick","setState","state","page","totalPage","flipToPage","prevButtonClick","onPage","data","history","pushState","onChangeOrientation","orientation","onChangeState","flipBook","getPageFlip","flip","Number","addPageToBookmark","localStorage","setItem","openBookmark","navigateToPage","preventDefault","pathname","substring","split","pathArray","window","location","pages","padding","href","this","setupRoute","getItem","getPageCount","length","isNumeric","str","parseFloat","type","xmlns","fill","viewBox","fillRule","d","size","minWidth","minHeight","maxWidth","maxHeight","maxShadowOpacity","flippingTime","showCover","mobileScrollSupport","clickEventForward","drawShadow","swipeDistance","useMouseEvents","onFlip","el","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","FlipDirection","FlipCorner","FlippingState","render","createdDensity","nowDrawingDensity","angle","area","position","x","y","hardAngle","hardDrawingAngle","pagePos","ImagePage","isLoad","loadingAngle","Image","tempDensity","ctx","getContext","convertToGlobal","pageWidth","getRect","pageHeight","save","translate","beginPath","p","lineTo","rotate","clip","drawImage","drawLoader","restore","orient","rect","RIGHT","left","top","shiftPos","strokeStyle","fillStyle","lineWidth","stroke","middlePoint","arc","Math","PI","closePath","onload","Helper","point1","point2","Infinity","sqrt","pow","segment","GetDistanceBetweenTwoPoint","line1","line2","A1","A2","B1","B2","acos","transformedPoint","startPoint","cos","sin","radius","limitedPoint","a","b","n","m","rectBorder","one","two","PointInRect","GetIntersectBeetwenTwoLine","C1","C2","det1","det2","isFinite","abs","Error","pointOne","pointTwo","sizeX","sizeY","lengthLine","max","result","getCord","c1","c2","index","i","push","FlipCalculation","direction","corner","topIntersectPoint","sideIntersectPoint","bottomIntersectPoint","parseInt","localPos","calcAngleAndPosition","calculateIntersectPoint","clipBottom","topLeft","BOTTOM","bottomLeft","TOP","FORWARD","topRight","BACK","GetAngleBetweenTwoLine","getSegmentToShadowLine","updateAngleAndGeometry","checkPositionAtCenterLine","calculateAngle","getPageRect","da","getRectFromBasePoint","points","getRotatedPoint","bottomRight","boundRect","GetIntersectBetweenTwoSegment","checkedPos","centerOne","centerTwo","tmp","LimitPointToCircle","rad","checkPointOne","checkPointTwo","bottomPoint","first","getShadowStartPoint","SizeType","Flip","app","flippingPage","bottomPage","calc","READ","globalPos","USER_FOLD","start","do","convertToPage","finishAnimation","getBoundsRect","FLIPPING","topMargins","yStart","getCorner","yDest","animateFlippingTo","reset","bookPos","convertToBook","getDirectionByPoint","flipCorner","checkDirection","getPageCollection","getFlippingPage","getBottomPage","getOrientation","Orientation","LANDSCAPE","nextPage","nextBy","getDensity","setDrawingDensity","HARD","prevPage","prevBy","setDirection","toString","progress","getFlippingProgress","setArea","getBottomClipArea","setPosition","getBottomPagePosition","setAngle","setHardAngle","getFlippingClipArea","getActiveCorner","getAngle","getDirection","setPageRect","setBottomPage","setFlippingPage","setShadowData","getShadowAngle","current","getCurrentSpreadIndex","next","getSpreadIndexByPage","setCurrentSpreadIndex","flipNext","flipPrev","getPosition","checkState","FOLD_CORNER","operatingDistance","stopMove","dest","isTurned","needReset","GetCordsFromTwoPoint","frames","duration","getAnimationDuration","startAnimation","turnToPrevPage","turnToNextPage","clearShadow","newState","updateState","touchPos","PORTRAIT","defaultTime","getSettings","getCurrentPageIndex","states","Settings","_default","startPage","FIXED","usePortrait","startZIndex","autoSize","showPageCorners","userSetting","Object","assign","STRETCH","Render","setting","leftPage","rightPage","shadow","animation","pageRect","boundsRect","timer","safari","regex","RegExp","exec","navigator","userAgent","frameIndex","round","startedAt","durationFrame","onAnimateEnd","drawFrame","update","requestAnimationFrame","loop","calculateBoundsRect","updateOrientation","blockWidth","getBlockWidth","getBlockHeight","ratio","opacity","getUI","getDistElement","offsetWidth","offsetHeight","setOrientation","LEFT","PageCollection","isShowCover","currentPageIndex","currentSpreadIndex","landscapeSpread","portraitSpread","setDensity","pageNum","spread","getSpread","pageIndex","idx","indexOf","newTemporaryCopy","showSpread","spreadIndex","newIndex","setLeftPage","setRightPage","updatePageIndex","ImagePageCollection","imagesHref","SOFT","load","createSpread","HTMLPage","element","copiedElement","temporaryCopy","classList","add","cloneNode","parentElement","appendChild","getTemporaryCopy","remove","commonStyle","zIndex","drawHard","drawSoft","newStyle","cssText","polygon","g","GetRotatedPoint","slice","isSafari","HTMLPageCollection","items","pagesElement","pageElement","dataset","CanvasRender","inCanvas","canvas","clear","simpleDraw","draw","drawBookShadow","drawOuterShadow","drawInnerShadow","shadowSize","shadowPos","outerGradient","createLinearGradient","addColorStop","fillRect","convertRectToGlobal","moveTo","isw","innerGradient","UI","inBlock","wrapper","distElement","touchPoint","swipeTimeout","onResize","onMouseDown","checkTarget","getMousePos","clientX","clientY","startUserTouch","onTouchStart","changedTouches","t","point","time","Date","now","setTimeout","onMouseUp","userStop","onMouseMove","userMove","onTouchMove","getState","cancelable","onTouchEnd","isSwipe","dx","distY","getRender","insertAdjacentHTML","querySelector","k","display","addEventListener","removeHandlers","paddingBottom","removeEventListener","passive","getBoundingClientRect","Array","isArray","includes","tagName","toLowerCase","HTMLUI","item","setHandlers","innerHTML","CanvasUI","querySelectorAll","resizeCanvas","cs","getComputedStyle","getPropertyValue","EventObject","events","Map","eventName","callback","has","get","set","event","delete","object","HTMLRender","outerShadow","innerShadow","hardShadow","hardInnerShadow","createShadows","innerShadowSize","shadowTranslate","shadowDirection","getDrawingDensity","getElement","setHardDrawingAngle","getHardAngle","drawLeftPage","drawRightPage","drawBottomPage","drawHardOuterShadow","drawHardInnerShadow","getPages","hideTemporaryCopy","PageFlip","mousePosition","isUserTouch","isUserMove","block","flipController","ui","destroy","show","getCanvas","trigger","mode","updateItems","showPrev","showNext","newPage","newOrientation","setOrientationStyle","getPage","isTouch","fold","showCorner","HTMLFlipBook","pageFlip","loadFromHTML","childRef","on","onInit","onUpdate","prevProps","off","updateFromHtml","childWithRef","Children","map","child","cloneElement","dom","createElement","number","backgroundImage","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bca5135e.chunk.js","sourcesContent":["import { Render } from '../Render/Render';\r\nimport { Point } from '../BasicTypes';\r\n\r\n/**\r\n * State of the page on the basis of which rendering\r\n */\r\nexport interface PageState {\r\n  /** Page rotation angle */\r\n  angle: number;\r\n\r\n  /** Page scope */\r\n  area: Point[];\r\n\r\n  /** Page position */\r\n  position: Point;\r\n\r\n  /** Rotate angle for hard pages */\r\n  hardAngle: number;\r\n\r\n  /** Rotate angle for hard pages at renedering time */\r\n  hardDrawingAngle: number;\r\n}\r\n\r\nexport enum PageOrientation {\r\n  /** Left side page */\r\n  LEFT,\r\n\r\n  /** Right side page */\r\n  RIGHT,\r\n}\r\n\r\nexport enum PageDensity {\r\n  SOFT = 'soft',\r\n  HARD = 'hard',\r\n}\r\n\r\n/**\r\n * Class representing a book page\r\n */\r\nexport abstract class Page {\r\n  /** State of the page on the basis of which rendering */\r\n  protected state: PageState;\r\n  /** Render object */\r\n  protected render: Render;\r\n\r\n  /** Page Orientation */\r\n  protected orientation: PageOrientation;\r\n\r\n  /** Density at creation */\r\n  protected createdDensity: PageDensity;\r\n  /** Density at the time of rendering (Depends on neighboring pages) */\r\n  protected nowDrawingDensity: PageDensity;\r\n\r\n  protected constructor(render: Render, density: PageDensity) {\r\n    this.state = {\r\n      angle: 0,\r\n      area: [],\r\n      position: { x: 0, y: 0 },\r\n      hardAngle: 0,\r\n      hardDrawingAngle: 0,\r\n    };\r\n\r\n    this.createdDensity = density;\r\n    this.nowDrawingDensity = this.createdDensity;\r\n\r\n    this.render = render;\r\n  }\r\n\r\n  /**\r\n   * Render static page\r\n   * \r\n   * @param {PageOrientation} orient - Static page orientation\r\n   */\r\n  public abstract simpleDraw(orient: PageOrientation): void;\r\n\r\n  /**\r\n   * Render dynamic page, using state\r\n   * \r\n   * @param {PageDensity} tempDensity - Density at the time of rendering \r\n   */\r\n  public abstract draw(tempDensity?: PageDensity): void;\r\n\r\n  /**\r\n   * Page loading\r\n   */\r\n  public abstract load(): void;\r\n\r\n  /**\r\n   * Set a constant page density\r\n   * \r\n   * @param {PageDensity} density \r\n   */\r\n  public setDensity(density: PageDensity): void {\r\n    this.createdDensity = density;\r\n    this.nowDrawingDensity = density;\r\n  }\r\n\r\n  /**\r\n   * Set temp page density to next render\r\n   * \r\n   * @param {PageDensity}  density \r\n   */\r\n  public setDrawingDensity(density: PageDensity): void {\r\n    this.nowDrawingDensity = density;\r\n  }\r\n\r\n  /**\r\n   * Set page position\r\n   * \r\n   * @param {Point} pagePos \r\n   */\r\n  public setPosition(pagePos: Point): void {\r\n    this.state.position = pagePos;\r\n  }\r\n\r\n  /**\r\n   * Set page angle\r\n   * \r\n   * @param {number} angle \r\n   */\r\n  public setAngle(angle: number): void {\r\n    this.state.angle = angle;\r\n  }\r\n\r\n  /**\r\n   * Set page crop area\r\n   * \r\n   * @param {Point[]} area \r\n   */\r\n  public setArea(area: Point[]): void {\r\n    this.state.area = area;\r\n  }\r\n\r\n  /**\r\n   * Rotate angle for hard pages to next render\r\n   * \r\n   * @param {number} angle \r\n   */\r\n  public setHardDrawingAngle(angle: number): void {\r\n    this.state.hardDrawingAngle = angle;\r\n  }\r\n\r\n  /**\r\n   * Rotate angle for hard pages\r\n   * \r\n   * @param {number} angle \r\n   */\r\n  public setHardAngle(angle: number): void {\r\n    this.state.hardAngle = angle;\r\n    this.state.hardDrawingAngle = angle;\r\n  }\r\n\r\n  /**\r\n   * Set page orientation\r\n   * \r\n   * @param {PageOrientation} orientation \r\n   */\r\n  public setOrientation(orientation: PageOrientation): void {\r\n    this.orientation = orientation;\r\n  }\r\n\r\n  /**\r\n   * Get temp page density\r\n   */\r\n  public getDrawingDensity(): PageDensity {\r\n    return this.nowDrawingDensity;\r\n  }\r\n\r\n  /**\r\n   * Get a constant page density\r\n   */\r\n  public getDensity(): PageDensity {\r\n    return this.createdDensity;\r\n  }\r\n\r\n  /**\r\n   * Get rotate angle for hard pages\r\n   */\r\n  public getHardAngle(): number {\r\n    return this.state.hardAngle;\r\n  }\r\n\r\n  public abstract newTemporaryCopy(): Page;\r\n  public abstract getTemporaryCopy(): Page;\r\n  public abstract hideTemporaryCopy(): void;\r\n}\r\n","import React from 'react'\r\nimport './Page.scss';\r\n\r\nconst PageCover = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div\r\n      className={'page page-cover page-cover-' + props.pos}\r\n      // style={{ backgroundImage: `url('${process.env.PUBLIC_URL}/logo512.png')` }}\r\n      // style={{ height: '1000px', backgroundImage: \"url('https://im6.ezgif.com/tmp/ezgif-6-42faa7869bbf.png')\" }}\r\n      ref={ref}\r\n      data-density='hard'\r\n    >\r\n      {(props.bookmark === true) ?\r\n        <img\r\n          className='bookmark'\r\n          src={process.env.PUBLIC_URL + '/bookmark.png'}\r\n          style={{ filter: 'invert(10%) sepia(96%) saturate(6344%) hue-rotate(1deg) brightness(121%) contrast(113%)' }}\r\n          alt=\"könyvjelző\"\r\n          title='Kinyitás a könyvjelzőnél'\r\n          onClick={props.onBookmark}\r\n        />\r\n        : null\r\n      }\r\n      <div className='page-content'>\r\n        <h2>{props.children}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst Page = React.forwardRef((props, ref) => {\r\n  var pageClass = 'page ' + (props.no_animation ? 'no-animation' : '');\r\n  return (\r\n    <div className={pageClass} ref={ref} data-density={props.density | 'soft'}>\r\n      <div className='page-content'>\r\n        {(props.pageTitle !== undefined) ?\r\n          <h2 className='page-header'>{props.pageTitle}</h2> : null\r\n        }\r\n        {(props.image !== undefined) ?\r\n          <div className='page-image'>\r\n            <figure>\r\n              <img\r\n                alt={props.imageCaption}\r\n                src={props.image}\r\n                onClick={showFullImage}\r\n                onLoad={setDimensions}\r\n              ></img>\r\n              <figcaption>{props.imageCaption}</figcaption>\r\n            </figure>\r\n          </div>\r\n          : null\r\n        }\r\n        {(props.children) ? <div className='page-text'>{props.children}</div> : null}\r\n        <div className='page-footer'>{isNaN(props.pageNumber) ? '' : props.pageNumber}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  function setDimensions(e) {\r\n    e.target.style = (e.target.width > e.target.height) ? 'width: 100%' : 'height: 100%';\r\n  }\r\n\r\n  function showFullImage(e) {\r\n    console.log('props', props);\r\n    console.log('ref', ref);\r\n    e.target.requestFullscreen().then(() => {\r\n\r\n    });\r\n  }\r\n});\r\n\r\nexport { PageCover, Page };","/* eslint-disable no-restricted-globals */\r\nimport React from 'react'\r\nimport HTMLFlipBook from 'm-react-pageflip';\r\nimport './ImageBook.scss';\r\nimport { Page, PageCover } from './Page/Page';\r\n\r\nclass ImageBook extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const pages = [\r\n      <PageCover key={0} pos='top' bookmark image={process.env.PUBLIC_URL + '/h608.jpg'} onBookmark={this.openBookmark}>Alim Adilov képeskönyve</PageCover>,\r\n      <Page key={1} pageNumber={1} pageTitle={'Önéletrajz'}>\r\n        {/* <article style={{ padding: '2%' }}>\r\n          Alim Adilov is a painter, was born in 1963, Taskent, Uzbekistan.\r\n          During his elementary studies he was enrolled to the best drawing course in the city.<br />\r\n          In 1979 he started the secondary art school, where strict but great knowledged teachers taught him, e.g. the Korean Emil-Ki- Gajt, who did several successful book illustrations. In his 5th year, he learned on advanced level, he grew up as an artist who is ready to work full responsibility.<br />\r\n          After 2 years military service, he applied to the world famous Rjepin Art Academy.<br />\r\n          He had teachers like the internationally reputed Vitrugonszkji.<br />\r\n          After graduating he went to England where he was a designer at a big company, so soon he could start working individually. In 1991, he got a work from an elegant gallery from the London Sloan Square, to organize an exhibition from his works. His all paintings were purchased in one.<br />\r\n          After settling down in Hungary, soon he became popular both professional and artistic field. Besides his professional success, he found his personal happiness, found his wife they have 2 great sons. In the next couple of years, he was the regular invited member of the art art camps in Hungary, and international camps. He had many separately and group exhibition in Hungary and internationally. Now he has a constant exhibition in Madeira.<br /><br />\r\n\r\n          He is the member of the Hungarian Art Association.<br />\r\n          His paintings are often bought because this way the buyers can take home a slice from the East, from their holiday. The vivid colors of the paintings are reflectiong the beach, the market, so the owners can feel these moments in their weekdays.<br />\r\n          Favourably, he works on those topics he experienced on his journey. Cities, landscapes, houses but also portraits, still lifes.All over the world he had solo and organised exhibitions, also he has a permanent exhibition on Madeira\r\n        </article> */}\r\n        <article style={{ padding: '2%' }}>\r\n          Alim Adilov Üzbegisztán fõvárosában, Taskentben született 1963-ban és gyerekkorában elkezdett járni mûvészeti szakkörre, ahol Zója Grigorevna kiváló festõmûvésznõ tanította. 8 éves iskolai végzettség után Taskentben 4 éves Mûvészeti technikumot végzett.\r\n          Katonai szolgálat után felvételizett az európai hirû szentpétervári \"Repin\" Képzõmûvészeti Akadémiara és ott 6 évig tanult, közben részt vett csoportos kiállításokban Szovjetunióban és számos külföldi országban. Akadémia elvégzése után elutazott Londonba, ahol részt vett a \"Canvas\" mûvészeti tanfolyamban.\r\n          <br />1993 óta hazankban él és alkot. 2004-tõl a Magyar Alkotomûvészek Országos Egyesületének tagja. Többnyire vegyes technikával, vegyes témákban dolgozik. Mûvésztelepeknek rendszeres tagja.\r\n          <br />\"Alim Adilov festõmûvész rohanó életünk elé olyan festményeket állít, melyekbõl sugárzik a természet varázsa és a Teremtõ jósága. Képei, mint bástyák dacolnak a háborgó világ forgatagával, idõk és korok múlásával.\"\r\n          <br />\r\n          Csoportos kiállitások: Szentpétervár, Moszkva, Rosztov, Taskent, Tokyo, Kuala Lumpur, Budapest, Debrecen, Békéscsaba\r\n          Önálló kiállítások: London, Békéscsaba, Miskolc, Debrecen, Gödöllõ, Kecskemét, Budapest, Malaysia (Puchong), Kuala Lumpur\r\n          Állandó kiállítás: Madeira\r\n        </article>\r\n      </Page>,\r\n      <Page key={2} pageNumber={2} pageTitle={'Tartalomjegyzék'}>\r\n        <ol>\r\n          <li><a href='1' onClick={this.navigateToPage}>Önéletrajz</a></li>\r\n          <li><a href='2' onClick={this.navigateToPage}>Tengerparton</a></li>\r\n          <li><a href='3' onClick={this.navigateToPage}>Cserépedények</a></li>\r\n          <li><a href='4' onClick={this.navigateToPage}>Virágok az ablakban</a></li>\r\n          <li><a href='5' onClick={this.navigateToPage}>Átjáró</a></li>\r\n        </ol>\r\n      </Page>,\r\n      <Page key={3} pageNumber={3} image={process.env.PUBLIC_URL + '/h608.jpg'} imageCaption={'Tengerparton'}></Page>,\r\n      <Page key={4} pageNumber={4} image={process.env.PUBLIC_URL + '/h503.jpg'} imageCaption={'Cserépedények'}></Page>,\r\n      <Page key={5} pageNumber={5} image={process.env.PUBLIC_URL + '/h607.jpg'} imageCaption={'Virágok az ablakban'}></Page>,\r\n      <Page key={6} pageNumber={6} image={process.env.PUBLIC_URL + '/f1014.jpg'} imageCaption={'Átjáró'}></Page>,\r\n      <PageCover key={7} image={process.env.PUBLIC_URL + '/h608.jpg'} pos='bottom'></PageCover>\r\n    ];\r\n\r\n    this.state = {\r\n      bookmark: null,\r\n      page: 0,\r\n      pages: pages,\r\n      orientation: 'landscape',\r\n      state: 'read',\r\n      totalPage: 0,\r\n    };\r\n  }\r\n\r\n  // Lifecycle management\r\n  componentDidMount() {\r\n    const page = this.setupRoute();\r\n    const bookmark = Number(localStorage.getItem('bookmark'));\r\n\r\n    this.setState((state, props) => ({\r\n      totalPage: this.flipBook.getPageFlip().getPageCount(),\r\n      page: page,\r\n      bookmark: bookmark\r\n    }), () => {\r\n      this.flipToPage();\r\n    });\r\n  }\r\n\r\n  // Event handlers\r\n\r\n  nextButtonClick = () => {\r\n    this.setState((state, props) => ({\r\n      page: (state.totalPage > state.page) ? state.page + 1 : state.page,\r\n    }), (e) => {\r\n      this.flipToPage();\r\n    });\r\n  };\r\n\r\n  prevButtonClick = () => {\r\n    this.setState((state, props) => ({\r\n      page: (0 < state.page) ? state.page - 1 : state.page,\r\n    }), () => {\r\n      this.flipToPage();\r\n    });\r\n  };\r\n\r\n  onPage = (e) => {\r\n    this.setState((state, props) => ({\r\n      page: e.data,\r\n    }), () => {\r\n      // eslint-disable-next-line no-restricted-globals\r\n      history.pushState(e.data, '', e.data);\r\n    });\r\n  };\r\n\r\n  onChangeOrientation = (e) => {\r\n    this.setState((state, props) => ({\r\n      orientation: e.data,\r\n    }));\r\n  }\r\n\r\n  onChangeState = (e) => {\r\n    this.setState((state, props) => ({\r\n      state: e.data,\r\n    }));\r\n  }\r\n\r\n  flipToPage = () => {\r\n    console.log(this.state.page);\r\n    this.flipBook.getPageFlip().flip(Number(this.state.page) + 1);\r\n  }\r\n\r\n  addPageToBookmark = () => {\r\n    this.setState((state, props) => ({\r\n      bookmark: this.state.page\r\n    }), () => {\r\n      localStorage.setItem('bookmark', this.state.bookmark);\r\n    });\r\n  }\r\n\r\n  openBookmark = () => {\r\n    console.log(this.state);\r\n    this.setState((state, props) => ({\r\n      page: this.state.bookmark\r\n    }), () => {\r\n      this.flipToPage();\r\n    });\r\n  }\r\n\r\n  // Routing\r\n\r\n  navigateToPage = (e) => {\r\n    e.preventDefault();\r\n    // console.dir(e.target.pathname.substring(1).split('/')[1]);\r\n    this.setState((state, props) => ({\r\n      page: Number(e.target.pathname.substring(1).split('/')[1]),\r\n    }), () => {\r\n      this.flipToPage();\r\n    });\r\n  }\r\n\r\n  setupRoute() {\r\n    console.log('TODO: window.location.pathname', window.location.pathname)\r\n    let page = 0;\r\n    if (this.pathArray().length > 3 || !this.isNumeric(this.pathArray()[2])) {\r\n      // history.pushState(window.location.pathname, '', '/book/0');\r\n      history.pushState(null, '', window.location.href + '/book/0');\r\n    } else {\r\n      page = Number(this.pathArray()[2]);\r\n    }\r\n    return page;\r\n  }\r\n\r\n  // Utility functions\r\n  pathArray = () => {\r\n    return window.location.pathname.split('/');\r\n  }\r\n\r\n  // https://stackoverflow.com/a/175787\r\n  isNumeric(str) {\r\n    if (typeof str != 'string') return false // we only process strings!\r\n    return !isNaN(str) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n      !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      // <div className='no-select book-container'\r\n      <div className='book-container container-md'\r\n      // style={{ maxHeight: '100vh', maxWidth: '100vw', display: 'flex', flexDirection: 'column', alignItems: 'center', position: 'relative' }}\r\n      >\r\n        <button type={'button'} className={'mt-1 btn btn-success'} onClick={this.addPageToBookmark} title={'Oldal könyvjelzőzése'}>\r\n          <svg xmlns={'http://www.w3.org/2000/svg'} width={'16'} height={'16'} fill={'currentColor'} className={'bi bi-bookmark-plus'} viewBox={'0 0 16 16'}>\r\n            <path fillRule={'evenodd'} d={'M8 4a.5.5 0 0 1 .5.5V6H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V7H6a.5.5 0 0 1 0-1h1.5V4.5A.5.5 0 0 1 8 4z'} />\r\n            <path d={'M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z'} />\r\n          </svg>\r\n        </button>\r\n        <button type={'button'} className={'mt-1 btn btn-danger'} onClick={this.openBookmark} title={'Oldal kinyitása a könyvjelzőhöz'}>\r\n          <svg xmlns={'http://www.w3.org/2000/svg'} width={'16'} height={'16'} fill={'currentColor'} className={'bi bi-bookmark-plus'} viewBox={'0 0 16 16'}>\r\n            <path fillRule={'evenodd'} d={'M8 4a.5.5 0 0 1 .5.5V6H10a.5.5 0 0 1 0 1H8.5v1.5a.5.5 0 0 1-1 0V7H6a.5.5 0 0 1 0-1h1.5V4.5A.5.5 0 0 1 8 4z'} />\r\n            <path d={'M2 2a2 2 0 0 1 2-2h8a2 2 0 0 1 2 2v13.5a.5.5 0 0 1-.777.416L8 13.101l-5.223 2.815A.5.5 0 0 1 2 15.5V2zm2-1a1 1 0 0 0-1 1v12.566l4.723-2.482a.5.5 0 0 1 .554 0L13 14.566V2a1 1 0 0 0-1-1H4z'} />\r\n          </svg>\r\n        </button>\r\n        <HTMLFlipBook\r\n          width={550}\r\n          height={733}\r\n          size='stretch'\r\n          minWidth={315}\r\n          minHeight={400}\r\n          maxWidth={1000}\r\n          maxHeight={1533}\r\n          maxShadowOpacity={0.5}\r\n          flippingTime={700}\r\n          showCover={true}\r\n          mobileScrollSupport={true}\r\n          clickEventForward={['img', 'button', 'a']}\r\n          drawShadow={true}\r\n          swipeDistance={0}\r\n          useMouseEvents={true}\r\n\r\n          onFlip={this.onPage}\r\n          onChangeOrientation={this.onChangeOrientation}\r\n          onChangeState={this.onChangeState}\r\n\r\n          className='image-book'\r\n\r\n          ref={(el) => (this.flipBook = el)}\r\n        >\r\n          {this.state.pages}\r\n        </HTMLFlipBook>\r\n\r\n        {/* <div className='pageturner-container'>\r\n          <div>\r\n\r\n            <button type='button' onClick={this.prevButtonClick}>Előző oldal</button>\r\n\r\n            [<span>{this.state.page}</span> of <span> {this.state.totalPage} </span>]\r\n\r\n            <button type='button' onClick={this.nextButtonClick}>Következő oldal</button>\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageBook;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { Orientation, Render } from '../Render/Render';\r\nimport { PageFlip } from '../PageFlip';\r\nimport { Helper } from '../Helper';\r\nimport { PageRect, Point } from '../BasicTypes';\r\nimport { FlipCalculation } from './FlipCalculation';\r\nimport { Page, PageDensity } from '../Page/Page';\r\n\r\n/**\r\n * Flipping direction\r\n */\r\nexport enum FlipDirection {\r\n  FORWARD,\r\n  BACK,\r\n}\r\n\r\n/**\r\n * Active corner when flipping\r\n */\r\nexport enum FlipCorner {\r\n  TOP = 'top',\r\n  BOTTOM = 'bottom',\r\n}\r\n\r\n/**\r\n * State of the book\r\n */\r\nexport enum FlippingState {\r\n  /** The user folding the page */\r\n  USER_FOLD = 'user_fold',\r\n\r\n  /** Mouse over active corners */\r\n  FOLD_CORNER = 'fold_corner',\r\n\r\n  /** During flipping animation */\r\n  FLIPPING = 'flipping',\r\n\r\n  /** Base state */\r\n  READ = 'read',\r\n}\r\n\r\n/**\r\n * Class representing the flipping process\r\n */\r\nexport class Flip {\r\n  private readonly render: Render;\r\n  private readonly app: PageFlip;\r\n\r\n  private flippingPage: Page = null;\r\n  private bottomPage: Page = null;\r\n\r\n  private calc: FlipCalculation = null;\r\n\r\n  private state: FlippingState = FlippingState.READ;\r\n\r\n  constructor(render: Render, app: PageFlip) {\r\n    this.render = render;\r\n    this.app = app;\r\n  }\r\n\r\n  /**\r\n   * Called when the page folding (User drags page corner)\r\n   * \r\n   * @param globalPos - Touch Point Coordinates (relative window)\r\n   */\r\n  public fold(globalPos: Point): void {\r\n    this.setState(FlippingState.USER_FOLD);\r\n\r\n    // If the process has not started yet\r\n    if (this.calc === null) this.start(globalPos);\r\n\r\n    this.do(this.render.convertToPage(globalPos));\r\n  }\r\n\r\n  /**\r\n   * Page turning with animation\r\n   * \r\n   * @param globalPos - Touch Point Coordinates (relative window)\r\n   */\r\n  public flip(globalPos: Point): void {\r\n    // the flipiing process is already running\r\n    if (this.calc !== null) this.render.finishAnimation();\r\n\r\n    if (!this.start(globalPos)) return;\r\n\r\n    const rect = this.getBoundsRect();\r\n\r\n    this.setState(FlippingState.FLIPPING);\r\n\r\n    // Margin from top to start flipping\r\n    const topMargins = rect.height / 10;\r\n\r\n    // Defining animation start points\r\n    const yStart =\r\n      this.calc.getCorner() === FlipCorner.BOTTOM ? rect.height - topMargins : topMargins;\r\n\r\n    const yDest = this.calc.getCorner() === FlipCorner.BOTTOM ? rect.height : 0;\r\n\r\n    // Сalculations for these points\r\n    this.calc.calc({ x: rect.pageWidth - topMargins, y: yStart });\r\n\r\n    // Run flipping animation\r\n    this.animateFlippingTo(\r\n      { x: rect.pageWidth - topMargins, y: yStart },\r\n      { x: -rect.pageWidth, y: yDest },\r\n      true\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Start the flipping process. Find direction and corner of flipping. Creating an object for calculation.\r\n   * \r\n   * @param {Point} globalPos - Touch Point Coordinates (relative window)\r\n   * \r\n   * @returns {boolean} True if flipping is possible, false otherwise\r\n   */\r\n  public start(globalPos: Point): boolean {\r\n    this.reset();\r\n\r\n    const bookPos = this.render.convertToBook(globalPos);\r\n    const rect = this.getBoundsRect();\r\n\r\n    // Find the direction of flipping\r\n    const direction = this.getDirectionByPoint(bookPos);\r\n\r\n    // Find the active corner\r\n    const flipCorner = bookPos.y >= rect.height / 2 ? FlipCorner.BOTTOM : FlipCorner.TOP;\r\n\r\n    if (!this.checkDirection(direction)) return false;\r\n\r\n    try {\r\n      this.flippingPage = this.app.getPageCollection().getFlippingPage(direction);\r\n      this.bottomPage = this.app.getPageCollection().getBottomPage(direction);\r\n\r\n      // In landscape mode, needed to set the density  of the next page to the same as that of the flipped\r\n      if (this.render.getOrientation() === Orientation.LANDSCAPE) {\r\n        if (direction === FlipDirection.BACK) {\r\n          const nextPage = this.app.getPageCollection().nextBy(this.flippingPage);\r\n\r\n          if (nextPage !== null) {\r\n            if (this.flippingPage.getDensity() !== nextPage.getDensity()) {\r\n              this.flippingPage.setDrawingDensity(PageDensity.HARD);\r\n              nextPage.setDrawingDensity(PageDensity.HARD);\r\n            }\r\n          }\r\n        } else {\r\n          const prevPage = this.app.getPageCollection().prevBy(this.flippingPage);\r\n\r\n          if (prevPage !== null) {\r\n            if (this.flippingPage.getDensity() !== prevPage.getDensity()) {\r\n              this.flippingPage.setDrawingDensity(PageDensity.HARD);\r\n              prevPage.setDrawingDensity(PageDensity.HARD);\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.render.setDirection(direction);\r\n      this.calc = new FlipCalculation(\r\n        direction,\r\n        flipCorner,\r\n        rect.pageWidth.toString(10), // fix bug with type casting\r\n        rect.height.toString(10) // fix bug with type casting\r\n      );\r\n\r\n      return true;\r\n    } catch (e) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Perform calculations for the current page position. Pass data to render object\r\n   * \r\n   * @param {Point} pagePos - Touch Point Coordinates (relative active page)\r\n   */\r\n  private do(pagePos: Point): void {\r\n    if (this.calc === null) return; // Flipping process not started\r\n\r\n    if (this.calc.calc(pagePos)) { // Perform calculations for a specific position\r\n      const progress = this.calc.getFlippingProgress();\r\n\r\n      this.bottomPage.setArea(this.calc.getBottomClipArea());\r\n      this.bottomPage.setPosition(this.calc.getBottomPagePosition());\r\n      this.bottomPage.setAngle(0);\r\n      this.bottomPage.setHardAngle(0);\r\n\r\n      this.flippingPage.setArea(this.calc.getFlippingClipArea());\r\n      this.flippingPage.setPosition(this.calc.getActiveCorner());\r\n      this.flippingPage.setAngle(this.calc.getAngle());\r\n\r\n      if (this.calc.getDirection() === FlipDirection.FORWARD) {\r\n        this.flippingPage.setHardAngle((90 * (200 - progress * 2)) / 100);\r\n      } else {\r\n        this.flippingPage.setHardAngle((-90 * (200 - progress * 2)) / 100);\r\n      }\r\n\r\n      this.render.setPageRect(this.calc.getRect());\r\n\r\n      this.render.setBottomPage(this.bottomPage);\r\n      this.render.setFlippingPage(this.flippingPage);\r\n\r\n      this.render.setShadowData(\r\n        this.calc.getShadowStartPoint(),\r\n        this.calc.getShadowAngle(),\r\n        progress,\r\n        this.calc.getDirection()\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Turn to the specified page number (with animation)\r\n   *\r\n   * @param {number} page - New page number\r\n   * @param {FlipCorner} corner - Active page corner when turning\r\n   */\r\n  public flipToPage(page: number, corner: FlipCorner): void {\r\n    const current = this.app.getPageCollection().getCurrentSpreadIndex();\r\n    const next = this.app.getPageCollection().getSpreadIndexByPage(page);\r\n\r\n    try {\r\n      if (next > current) {\r\n        this.app.getPageCollection().setCurrentSpreadIndex(next - 1);\r\n        this.flipNext(corner);\r\n      }\r\n      if (next < current) {\r\n        this.app.getPageCollection().setCurrentSpreadIndex(next + 1);\r\n        this.flipPrev(corner);\r\n      }\r\n    } catch (e) {\r\n      //\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Turn to the next page (with animation)\r\n   *\r\n   * @param {FlipCorner} corner - Active page corner when turning\r\n   */\r\n  public flipNext(corner: FlipCorner): void {\r\n    this.flip({\r\n      x: this.render.getRect().left + this.render.getRect().pageWidth * 2,\r\n      y: corner === FlipCorner.TOP ? 1 : this.render.getRect().height - 2,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Turn to the prev page (with animation)\r\n   *\r\n   * @param {FlipCorner} corner - Active page corner when turning\r\n   */\r\n  public flipPrev(corner: FlipCorner): void {\r\n    this.flip({\r\n      x: 10,\r\n      y: corner === FlipCorner.TOP ? 1 : this.render.getRect().height - 2,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Called when the user has stopped flipping\r\n   */\r\n  public stopMove(): void {\r\n    if (this.calc === null) return;\r\n\r\n    const pos = this.calc.getPosition();\r\n    const rect = this.getBoundsRect();\r\n\r\n    const y = this.calc.getCorner() === FlipCorner.BOTTOM ? rect.height : 0;\r\n\r\n    if (pos.x <= 0) this.animateFlippingTo(pos, { x: -rect.pageWidth, y }, true);\r\n    else this.animateFlippingTo(pos, { x: rect.pageWidth, y }, false);\r\n  }\r\n\r\n  /**\r\n   * Fold the corners of the book when the mouse pointer is over them.\r\n   * Called when the mouse pointer is over the book without clicking\r\n   * \r\n   * @param globalPos \r\n   */\r\n  public showCorner(globalPos: Point): void {\r\n    if (!this.checkState(FlippingState.READ, FlippingState.FOLD_CORNER)) return;\r\n\r\n    const rect = this.getBoundsRect();\r\n    const pageWidth = rect.pageWidth;\r\n\r\n    // folding angle length\r\n    const operatingDistance = Math.sqrt(Math.pow(pageWidth, 2) + Math.pow(rect.height, 2)) / 5;\r\n\r\n    const bookPos = this.render.convertToBook(globalPos);\r\n\r\n    if (\r\n      bookPos.x > 0 &&\r\n      bookPos.y > 0 &&\r\n      bookPos.x < rect.width &&\r\n      bookPos.y < rect.height &&\r\n      (bookPos.x < operatingDistance || bookPos.x > rect.width - operatingDistance) &&\r\n      (bookPos.y < operatingDistance || bookPos.y > rect.height - operatingDistance)\r\n    ) {\r\n      if (this.calc === null) {\r\n        if (!this.start(globalPos)) return;\r\n\r\n        this.setState(FlippingState.FOLD_CORNER);\r\n\r\n        this.calc.calc({ x: pageWidth - 1, y: 1 });\r\n\r\n        const fixedCornerSize = 50;\r\n        const yStart = this.calc.getCorner() === FlipCorner.BOTTOM ? rect.height - 1 : 1;\r\n\r\n        const yDest =\r\n          this.calc.getCorner() === FlipCorner.BOTTOM\r\n            ? rect.height - fixedCornerSize\r\n            : fixedCornerSize;\r\n\r\n        this.animateFlippingTo(\r\n          { x: pageWidth - 1, y: yStart },\r\n          { x: pageWidth - fixedCornerSize, y: yDest },\r\n          false,\r\n          false\r\n        );\r\n      } else {\r\n        this.do(this.render.convertToPage(globalPos));\r\n      }\r\n    } else {\r\n      this.setState(FlippingState.READ);\r\n      this.render.finishAnimation();\r\n\r\n      this.stopMove();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Starting the flipping animation process\r\n   * \r\n   * @param {Point} start - animation start point\r\n   * @param {Point} dest - animation end point\r\n   * @param {boolean} isTurned - will the page turn over, or just bring it back\r\n   * @param {boolean} needReset - reset the flipping process at the end of the animation\r\n   */\r\n  private animateFlippingTo(\r\n    start: Point,\r\n    dest: Point,\r\n    isTurned: boolean,\r\n    needReset = true\r\n  ): void {\r\n    const points = Helper.GetCordsFromTwoPoint(start, dest);\r\n\r\n    // Create frames\r\n    const frames = [];\r\n    for (const p of points) frames.push(() => this.do(p));\r\n\r\n    const duration = this.getAnimationDuration(points.length);\r\n\r\n    this.render.startAnimation(frames, duration, () => {\r\n      // callback function\r\n      if (!this.calc) return;\r\n\r\n      if (isTurned) {\r\n        if (this.calc.getDirection() === FlipDirection.BACK) this.app.turnToPrevPage();\r\n        else this.app.turnToNextPage();\r\n      }\r\n\r\n      if (needReset) {\r\n        this.render.setBottomPage(null);\r\n        this.render.setFlippingPage(null);\r\n        this.render.clearShadow();\r\n\r\n        this.setState(FlippingState.READ);\r\n        this.reset();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the current calculations object\r\n   */\r\n  public getCalculation(): FlipCalculation {\r\n    return this.calc;\r\n  }\r\n\r\n  /**\r\n   * Get current flipping state\r\n   */\r\n  public getState(): FlippingState {\r\n    return this.state;\r\n  }\r\n\r\n  private setState(newState: FlippingState): void {\r\n    if (this.state !== newState) {\r\n      this.app.updateState(newState);\r\n      this.state = newState;\r\n    }\r\n  }\r\n\r\n  private getDirectionByPoint(touchPos: Point): FlipDirection {\r\n    const rect = this.getBoundsRect();\r\n\r\n    if (this.render.getOrientation() === Orientation.PORTRAIT) {\r\n      if (touchPos.x - rect.pageWidth <= rect.width / 5) {\r\n        return FlipDirection.BACK;\r\n      }\r\n    } else if (touchPos.x < rect.width / 2) {\r\n      return FlipDirection.BACK;\r\n    }\r\n\r\n    return FlipDirection.FORWARD;\r\n  }\r\n\r\n  private getAnimationDuration(size: number): number {\r\n    const defaultTime = this.app.getSettings().flippingTime;\r\n\r\n    if (size >= 1000) return defaultTime;\r\n\r\n    return (size / 1000) * defaultTime;\r\n  }\r\n\r\n  private checkDirection(direction: FlipDirection): boolean {\r\n    if (direction === FlipDirection.FORWARD)\r\n      return this.app.getCurrentPageIndex() < this.app.getPageCount() - 1;\r\n\r\n    return this.app.getCurrentPageIndex() >= 1;\r\n  }\r\n\r\n  private reset(): void {\r\n    this.calc = null;\r\n    this.flippingPage = null;\r\n    this.bottomPage = null;\r\n  }\r\n\r\n  private getBoundsRect(): PageRect {\r\n    return this.render.getRect();\r\n  }\r\n\r\n  private checkState(...states: FlippingState[]): boolean {\r\n    for (const state of states) {\r\n      if (this.state === state) return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { CanvasRender } from '../Render/CanvasRender';\r\nimport { Page, PageDensity, PageOrientation } from './Page';\r\nimport { Render } from '../Render/Render';\r\nimport { Point } from '../BasicTypes';\r\n\r\n/**\r\n * Class representing a book page as an image on Canvas\r\n */\r\nexport class ImagePage extends Page {\r\n    private readonly image: HTMLImageElement = null;\r\n    private isLoad = false;\r\n\r\n    private loadingAngle = 0;\r\n\r\n    constructor(render: Render, href: string, density: PageDensity) {\r\n        super(render, density);\r\n\r\n        this.image = new Image();\r\n        this.image.src = href;\r\n    }\r\n\r\n    public draw(tempDensity?: PageDensity): void {\r\n        const ctx = (this.render as CanvasRender).getContext();\r\n\r\n        const pagePos = this.render.convertToGlobal(this.state.position);\r\n        const pageWidth = this.render.getRect().pageWidth;\r\n        const pageHeight = this.render.getRect().height;\r\n\r\n        ctx.save();\r\n        ctx.translate(pagePos.x, pagePos.y);\r\n        ctx.beginPath();\r\n\r\n        for (let p of this.state.area) {\r\n            if (p !== null) {\r\n                p = this.render.convertToGlobal(p);\r\n                ctx.lineTo(p.x - pagePos.x, p.y - pagePos.y);\r\n            }\r\n        }\r\n\r\n        ctx.rotate(this.state.angle);\r\n\r\n        ctx.clip();\r\n\r\n        if (!this.isLoad) {\r\n            this.drawLoader(ctx, { x: 0, y: 0 }, pageWidth, pageHeight);\r\n        } else {\r\n            ctx.drawImage(this.image, 0, 0, pageWidth, pageHeight);\r\n        }\r\n\r\n        ctx.restore();\r\n    }\r\n\r\n    public simpleDraw(orient: PageOrientation): void {\r\n        const rect = this.render.getRect();\r\n        const ctx = (this.render as CanvasRender).getContext();\r\n\r\n        const pageWidth = rect.pageWidth;\r\n        const pageHeight = rect.height;\r\n\r\n        const x = orient === PageOrientation.RIGHT ? rect.left + rect.pageWidth : rect.left;\r\n\r\n        const y = rect.top;\r\n\r\n        if (!this.isLoad) {\r\n            this.drawLoader(ctx, { x, y }, pageWidth, pageHeight);\r\n        } else {\r\n            ctx.drawImage(this.image, x, y, pageWidth, pageHeight);\r\n        }\r\n    }\r\n\r\n    private drawLoader(\r\n        ctx: CanvasRenderingContext2D,\r\n        shiftPos: Point,\r\n        pageWidth: number,\r\n        pageHeight: number\r\n    ): void {\r\n        ctx.beginPath();\r\n        ctx.strokeStyle = 'rgb(200, 200, 200)';\r\n        ctx.fillStyle = 'rgb(255, 255, 255)';\r\n        ctx.lineWidth = 1;\r\n        ctx.rect(shiftPos.x + 1, shiftPos.y + 1, pageWidth - 1, pageHeight - 1);\r\n        ctx.stroke();\r\n        ctx.fill();\r\n\r\n        const middlePoint: Point = {\r\n            x: shiftPos.x + pageWidth / 2,\r\n            y: shiftPos.y + pageHeight / 2,\r\n        };\r\n\r\n        ctx.beginPath();\r\n        ctx.lineWidth = 10;\r\n        ctx.arc(\r\n            middlePoint.x,\r\n            middlePoint.y,\r\n            20,\r\n            this.loadingAngle,\r\n            (3 * Math.PI) / 2 + this.loadingAngle\r\n        );\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        this.loadingAngle += 0.07;\r\n        if (this.loadingAngle >= 2 * Math.PI) {\r\n            this.loadingAngle = 0;\r\n        }\r\n    }\r\n\r\n    public load(): void {\r\n        if (!this.isLoad)\r\n            this.image.onload = (): void => {\r\n                this.isLoad = true;\r\n            };\r\n    }\r\n\r\n    public newTemporaryCopy(): Page {\r\n        return this;\r\n    }\r\n\r\n    public getTemporaryCopy(): Page {\r\n        return this;\r\n    }\r\n\r\n    public hideTemporaryCopy(): void {\r\n        return;\r\n    }\r\n}\r\n","import { Point, Rect, Segment } from './BasicTypes';\r\n\r\n/**\r\n * A class containing helping mathematical methods\r\n */\r\nexport class Helper {\r\n    /**\r\n     * Get the distance between two points\r\n     *\r\n     * @param {Point} point1\r\n     * @param {Point} point2\r\n     */\r\n    public static GetDistanceBetweenTwoPoint(point1: Point, point2: Point): number {\r\n        if (point1 === null || point2 === null) {\r\n            return Infinity;\r\n        }\r\n\r\n        return Math.sqrt(Math.pow(point2.x - point1.x, 2) + Math.pow(point2.y - point1.y, 2));\r\n    }\r\n\r\n    /**\r\n     * Get the length of the line segment\r\n     *\r\n     * @param {Segment} segment\r\n     */\r\n    public static GetSegmentLength(segment: Segment): number {\r\n        return Helper.GetDistanceBetweenTwoPoint(segment[0], segment[1]);\r\n    }\r\n\r\n    /**\r\n     * Get the angle between two lines\r\n     *\r\n     * @param {Segment} line1\r\n     * @param {Segment} line2\r\n     */\r\n    public static GetAngleBetweenTwoLine(line1: Segment, line2: Segment): number {\r\n        const A1 = line1[0].y - line1[1].y;\r\n        const A2 = line2[0].y - line2[1].y;\r\n\r\n        const B1 = line1[1].x - line1[0].x;\r\n        const B2 = line2[1].x - line2[0].x;\r\n\r\n        return Math.acos((A1 * A2 + B1 * B2) / (Math.sqrt(A1 * A1 + B1 * B1) * Math.sqrt(A2 * A2 + B2 * B2)));\r\n    }\r\n\r\n    /**\r\n     * Check for a point in a rectangle\r\n     *\r\n     * @param {Rect} rect\r\n     * @param {Point} pos\r\n     *\r\n     * @returns {Point} If the point enters the rectangle its coordinates will be returned, otherwise - null\r\n     */\r\n    public static PointInRect(rect: Rect, pos: Point): Point {\r\n        if (pos === null) {\r\n            return null;\r\n        }\r\n\r\n        if (\r\n            pos.x >= rect.left &&\r\n            pos.x <= rect.width + rect.left &&\r\n            pos.y >= rect.top &&\r\n            pos.y <= rect.top + rect.height\r\n        ) {\r\n            return pos;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Transform point coordinates to a given angle\r\n     *\r\n     * @param {Point} transformedPoint - Point to rotate\r\n     * @param {Point} startPoint - Transformation reference point\r\n     * @param {number} angle - Rotation angle (in radians)\r\n     *\r\n     * @returns {Point} Point coordinates after rotation\r\n     */\r\n    public static GetRotatedPoint(transformedPoint: Point, startPoint: Point, angle: number): Point {\r\n        return {\r\n            x: transformedPoint.x * Math.cos(angle) + transformedPoint.y * Math.sin(angle) + startPoint.x,\r\n            y: transformedPoint.y * Math.cos(angle) - transformedPoint.x * Math.sin(angle) + startPoint.y,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Limit a point \"linePoint\" to a given circle centered at point \"startPoint\" and a given radius\r\n     *\r\n     * @param {Point} startPoint - Circle center\r\n     * @param {number} radius - Circle radius\r\n     * @param {Point} limitedPoint - Сhecked point\r\n     *\r\n     * @returns {Point} If \"linePoint\" enters the circle, then its coordinates are returned.\r\n     * Else will be returned the intersection point between the line ([startPoint, linePoint]) and the circle\r\n     */\r\n    public static LimitPointToCircle(startPoint: Point, radius: number, limitedPoint: Point): Point {\r\n        // If \"linePoint\" enters the circle, do nothing\r\n        if (Helper.GetDistanceBetweenTwoPoint(startPoint, limitedPoint) <= radius) {\r\n            return limitedPoint;\r\n        }\r\n\r\n        const a = startPoint.x;\r\n        const b = startPoint.y;\r\n        const n = limitedPoint.x;\r\n        const m = limitedPoint.y;\r\n\r\n        // Find the intersection between the line at two points: (startPoint and limitedPoint) and the circle.\r\n        let x = Math.sqrt((Math.pow(radius, 2) * Math.pow(a - n, 2)) / (Math.pow(a - n, 2) + Math.pow(b - m, 2))) + a;\r\n        if (limitedPoint.x < 0) {\r\n            x *= -1;\r\n        }\r\n\r\n        let y = ((x - a) * (b - m)) / (a - n) + b;\r\n        if (a - n + b === 0) {\r\n            y = radius;\r\n        }\r\n\r\n        return { x, y };\r\n    }\r\n\r\n    /**\r\n     * Find the intersection of two lines bounded by a rectangle \"rectBorder\"\r\n     *\r\n     * @param {Rect} rectBorder\r\n     * @param {Segment} one\r\n     * @param {Segment} two\r\n     *\r\n     * @returns {Point} The intersection point, or \"null\" if it does not exist, or it lies outside the rectangle \"rectBorder\"\r\n     */\r\n    public static GetIntersectBetweenTwoSegment(rectBorder: Rect, one: Segment, two: Segment): Point {\r\n        return Helper.PointInRect(rectBorder, Helper.GetIntersectBeetwenTwoLine(one, two));\r\n    }\r\n\r\n    /**\r\n     * Find the intersection point of two lines\r\n     *\r\n     * @param one\r\n     * @param two\r\n     *\r\n     * @returns {Point} The intersection point, or \"null\" if it does not exist\r\n     * @throws Error if the segments are on the same line\r\n     */\r\n    public static GetIntersectBeetwenTwoLine(one: Segment, two: Segment): Point {\r\n        const A1 = one[0].y - one[1].y;\r\n        const A2 = two[0].y - two[1].y;\r\n\r\n        const B1 = one[1].x - one[0].x;\r\n        const B2 = two[1].x - two[0].x;\r\n\r\n        const C1 = one[0].x * one[1].y - one[1].x * one[0].y;\r\n        const C2 = two[0].x * two[1].y - two[1].x * two[0].y;\r\n\r\n        const det1 = A1 * C2 - A2 * C1;\r\n        const det2 = B1 * C2 - B2 * C1;\r\n\r\n        const x = -((C1 * B2 - C2 * B1) / (A1 * B2 - A2 * B1));\r\n        const y = -((A1 * C2 - A2 * C1) / (A1 * B2 - A2 * B1));\r\n\r\n        if (isFinite(x) && isFinite(y)) {\r\n            return { x, y };\r\n        } else {\r\n            if (Math.abs(det1 - det2) < 0.1) throw new Error('Segment included');\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get a list of coordinates (step: 1px) between two points\r\n     *\r\n     * @param pointOne\r\n     * @param pointTwo\r\n     *\r\n     * @returns {Point[]}\r\n     */\r\n    public static GetCordsFromTwoPoint(pointOne: Point, pointTwo: Point): Point[] {\r\n        const sizeX = Math.abs(pointOne.x - pointTwo.x);\r\n        const sizeY = Math.abs(pointOne.y - pointTwo.y);\r\n\r\n        const lengthLine = Math.max(sizeX, sizeY);\r\n\r\n        const result: Point[] = [pointOne];\r\n\r\n        function getCord(c1: number, c2: number, size: number, length: number, index: number): number {\r\n            if (c2 > c1) {\r\n                return c1 + index * (size / length);\r\n            } else if (c2 < c1) {\r\n                return c1 - index * (size / length);\r\n            }\r\n\r\n            return c1;\r\n        }\r\n\r\n        for (let i = 1; i <= lengthLine; i += 1) {\r\n            result.push({\r\n                x: getCord(pointOne.x, pointTwo.x, sizeX, lengthLine, i),\r\n                y: getCord(pointOne.y, pointTwo.y, sizeY, lengthLine, i),\r\n            });\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { Helper } from '../Helper';\r\nimport { Point, Rect, RectPoints, Segment } from '../BasicTypes';\r\nimport { FlipCorner, FlipDirection } from './Flip';\r\n\r\n/**\r\n * Class representing mathematical methods for calculating page position (rotation angle, clip area ...)\r\n */\r\nexport class FlipCalculation {\r\n    /** Calculated rotation angle to flipping page */\r\n    private angle: number;\r\n    /** Calculated position to flipping page */\r\n    private position: Point;\r\n\r\n    private rect: RectPoints;\r\n\r\n    /** The point of intersection of the page with the borders of the book */\r\n    private topIntersectPoint: Point = null; // With top border\r\n    private sideIntersectPoint: Point = null; // With side border\r\n    private bottomIntersectPoint: Point = null; // With bottom border\r\n\r\n    private readonly pageWidth: number;\r\n    private readonly pageHeight: number;\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * @param {FlipDirection} direction - Flipping direction\r\n     * @param {FlipCorner} corner - Flipping corner\r\n     * @param pageWidth - Current page width\r\n     * @param pageHeight - Current page height\r\n     */\r\n    constructor(\r\n        private direction: FlipDirection,\r\n        private corner: FlipCorner,\r\n\r\n        pageWidth: string,\r\n        pageHeight: string\r\n    ) {\r\n        this.pageWidth = parseInt(pageWidth, 10);\r\n        this.pageHeight = parseInt(pageHeight, 10);\r\n    }\r\n\r\n    /**\r\n     * The main calculation method\r\n     * \r\n     * @param {Point} localPos - Touch Point Coordinates (relative active page!)\r\n     * \r\n     * @returns {boolean} True - if the calculations were successful, false if errors occurred\r\n     */\r\n    public calc(localPos: Point): boolean {\r\n        try {\r\n            // Find: page rotation angle and active corner position\r\n            this.position = this.calcAngleAndPosition(localPos);\r\n            // Find the intersection points of the scrolling page and the book\r\n            this.calculateIntersectPoint(this.position);\r\n\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the crop area for the flipping page\r\n     * \r\n     * @returns {Point[]} Polygon page\r\n     */\r\n    public getFlippingClipArea(): Point[] {\r\n        const result = [];\r\n        let clipBottom = false;\r\n\r\n        result.push(this.rect.topLeft);\r\n        result.push(this.topIntersectPoint);\r\n\r\n        if (this.sideIntersectPoint === null) {\r\n            clipBottom = true;\r\n        } else {\r\n            result.push(this.sideIntersectPoint);\r\n\r\n            if (this.bottomIntersectPoint === null) clipBottom = false;\r\n        }\r\n\r\n        result.push(this.bottomIntersectPoint);\r\n\r\n        if (clipBottom || this.corner === FlipCorner.BOTTOM) {\r\n            result.push(this.rect.bottomLeft);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get the crop area for the page that is below the page to be flipped\r\n     * \r\n     * @returns {Point[]} Polygon page\r\n     */\r\n    public getBottomClipArea(): Point[] {\r\n        const result = [];\r\n\r\n        result.push(this.topIntersectPoint);\r\n\r\n        if (this.corner === FlipCorner.TOP) {\r\n            result.push({ x: this.pageWidth, y: 0 });\r\n        } else {\r\n            if (this.topIntersectPoint !== null) {\r\n                result.push({ x: this.pageWidth, y: 0 });\r\n            }\r\n            result.push({ x: this.pageWidth, y: this.pageHeight });\r\n        }\r\n\r\n        if (this.sideIntersectPoint !== null) {\r\n            if (\r\n                Helper.GetDistanceBetweenTwoPoint(\r\n                    this.sideIntersectPoint,\r\n                    this.topIntersectPoint\r\n                ) >= 10\r\n            )\r\n                result.push(this.sideIntersectPoint);\r\n        } else {\r\n            if (this.corner === FlipCorner.TOP) {\r\n                result.push({ x: this.pageWidth, y: this.pageHeight });\r\n            }\r\n        }\r\n\r\n        result.push(this.bottomIntersectPoint);\r\n        result.push(this.topIntersectPoint);\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Get page rotation angle\r\n     */\r\n    public getAngle(): number {\r\n        if (this.direction === FlipDirection.FORWARD) {\r\n            return -this.angle;\r\n        }\r\n\r\n        return this.angle;\r\n    }\r\n\r\n    /**\r\n     * Get page area while flipping\r\n     */\r\n    public getRect(): RectPoints {\r\n        return this.rect;\r\n    }\r\n\r\n    /**\r\n     * Get the position of the active angle when turning\r\n     */\r\n    public getPosition(): Point {\r\n        return this.position;\r\n    }\r\n\r\n    /**\r\n     * Get the active corner of the page (which pull)\r\n     */\r\n    public getActiveCorner(): Point {\r\n        if (this.direction === FlipDirection.FORWARD) {\r\n            return this.rect.topLeft;\r\n        }\r\n\r\n        return this.rect.topRight;\r\n    }\r\n\r\n    /**\r\n     * Get flipping direction\r\n     */\r\n    public getDirection(): FlipDirection {\r\n        return this.direction;\r\n    }\r\n\r\n    /**\r\n     * Get flipping progress (0-100)\r\n     */\r\n    public getFlippingProgress(): number {\r\n        return Math.abs(((this.position.x - this.pageWidth) / (2 * this.pageWidth)) * 100);\r\n    }\r\n    \r\n    /**\r\n     * Get flipping corner position (top, bottom)\r\n     */\r\n    public getCorner(): FlipCorner {\r\n        return this.corner;\r\n    }\r\n\r\n    /**\r\n     * Get start position for the page that is below the page to be flipped\r\n     */\r\n    public getBottomPagePosition(): Point {\r\n        if (this.direction === FlipDirection.BACK) {\r\n            return { x: this.pageWidth, y: 0 };\r\n        }\r\n\r\n        return { x: 0, y: 0 };\r\n    }\r\n\r\n    /**\r\n     * Get the starting position of the shadow\r\n     */\r\n    public getShadowStartPoint(): Point {\r\n        if (this.corner === FlipCorner.TOP) {\r\n            return this.topIntersectPoint;\r\n        } else {\r\n            if (this.sideIntersectPoint !== null) return this.sideIntersectPoint;\r\n\r\n            return this.topIntersectPoint;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the rotate angle of the shadow\r\n     */\r\n    public getShadowAngle(): number {\r\n        const angle = Helper.GetAngleBetweenTwoLine(this.getSegmentToShadowLine(), [\r\n            { x: 0, y: 0 },\r\n            { x: this.pageWidth, y: 0 },\r\n        ]);\r\n\r\n        if (this.direction === FlipDirection.FORWARD) {\r\n            return angle;\r\n        }\r\n\r\n        return Math.PI - angle;\r\n    }\r\n\r\n    private calcAngleAndPosition(pos: Point): Point {\r\n        let result = pos;\r\n\r\n        this.updateAngleAndGeometry(result);\r\n\r\n        if (this.corner === FlipCorner.TOP) {\r\n            result = this.checkPositionAtCenterLine(\r\n                result,\r\n                { x: 0, y: 0 },\r\n                { x: 0, y: this.pageHeight }\r\n            );\r\n        } else {\r\n            result = this.checkPositionAtCenterLine(\r\n                result,\r\n                { x: 0, y: this.pageHeight },\r\n                { x: 0, y: 0 }\r\n            );\r\n        }\r\n\r\n        if (Math.abs(result.x - this.pageWidth) < 1 && Math.abs(result.y) < 1) {\r\n            throw new Error('Point is too small');\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private updateAngleAndGeometry(pos: Point): void {\r\n        this.angle = this.calculateAngle(pos);\r\n        this.rect = this.getPageRect(pos);\r\n    }\r\n\r\n    private calculateAngle(pos: Point): number {\r\n        const left = this.pageWidth - pos.x + 1;\r\n        const top = this.corner === FlipCorner.BOTTOM ? this.pageHeight - pos.y : pos.y;\r\n\r\n        let angle = 2 * Math.acos(left / Math.sqrt(top * top + left * left));\r\n\r\n        if (top < 0) angle = -angle;\r\n\r\n        const da = Math.PI - angle;\r\n        if (!isFinite(angle) || (da >= 0 && da < 0.003))\r\n            throw new Error('The G point is too small');\r\n\r\n        if (this.corner === FlipCorner.BOTTOM) angle = -angle;\r\n\r\n        return angle;\r\n    }\r\n\r\n\r\n    private getPageRect(localPos: Point): RectPoints {\r\n        if (this.corner === FlipCorner.TOP) {\r\n            return this.getRectFromBasePoint(\r\n                [\r\n                    { x: 0, y: 0 },\r\n                    { x: this.pageWidth, y: 0 },\r\n                    { x: 0, y: this.pageHeight },\r\n                    { x: this.pageWidth, y: this.pageHeight },\r\n                ],\r\n                localPos\r\n            );\r\n        }\r\n\r\n        return this.getRectFromBasePoint(\r\n            [\r\n                { x: 0, y: -this.pageHeight },\r\n                { x: this.pageWidth, y: -this.pageHeight },\r\n                { x: 0, y: 0 },\r\n                { x: this.pageWidth, y: 0 },\r\n            ],\r\n            localPos\r\n        );\r\n    }\r\n\r\n    private getRectFromBasePoint(points: Point[], localPos: Point): RectPoints {\r\n        return {\r\n            topLeft: this.getRotatedPoint(points[0], localPos),\r\n            topRight: this.getRotatedPoint(points[1], localPos),\r\n            bottomLeft: this.getRotatedPoint(points[2], localPos),\r\n            bottomRight: this.getRotatedPoint(points[3], localPos),\r\n        };\r\n    }\r\n\r\n    private getRotatedPoint(transformedPoint: Point, startPoint: Point): Point {\r\n        return {\r\n            x:\r\n                transformedPoint.x * Math.cos(this.angle) +\r\n                transformedPoint.y * Math.sin(this.angle) +\r\n                startPoint.x,\r\n            y:\r\n                transformedPoint.y * Math.cos(this.angle) -\r\n                transformedPoint.x * Math.sin(this.angle) +\r\n                startPoint.y,\r\n        };\r\n    }\r\n\r\n    private calculateIntersectPoint(pos: Point): void {\r\n        const boundRect: Rect = {\r\n            left: -1,\r\n            top: -1,\r\n            width: this.pageWidth + 2,\r\n            height: this.pageHeight + 2,\r\n        };\r\n\r\n        if (this.corner === FlipCorner.TOP) {\r\n            this.topIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\r\n                boundRect,\r\n                [pos, this.rect.topRight],\r\n                [\r\n                    { x: 0, y: 0 },\r\n                    { x: this.pageWidth, y: 0 },\r\n                ]\r\n            );\r\n\r\n            this.sideIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\r\n                boundRect,\r\n                [pos, this.rect.bottomLeft],\r\n                [\r\n                    { x: this.pageWidth, y: 0 },\r\n                    { x: this.pageWidth, y: this.pageHeight },\r\n                ]\r\n            );\r\n\r\n            this.bottomIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\r\n                boundRect,\r\n                [this.rect.bottomLeft, this.rect.bottomRight],\r\n                [\r\n                    { x: 0, y: this.pageHeight },\r\n                    { x: this.pageWidth, y: this.pageHeight },\r\n                ]\r\n            );\r\n        } else {\r\n            this.topIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\r\n                boundRect,\r\n                [this.rect.topLeft, this.rect.topRight],\r\n                [\r\n                    { x: 0, y: 0 },\r\n                    { x: this.pageWidth, y: 0 },\r\n                ]\r\n            );\r\n\r\n            this.sideIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\r\n                boundRect,\r\n                [pos, this.rect.topLeft],\r\n                [\r\n                    { x: this.pageWidth, y: 0 },\r\n                    { x: this.pageWidth, y: this.pageHeight },\r\n                ]\r\n            );\r\n\r\n            this.bottomIntersectPoint = Helper.GetIntersectBetweenTwoSegment(\r\n                boundRect,\r\n                [this.rect.bottomLeft, this.rect.bottomRight],\r\n                [\r\n                    { x: 0, y: this.pageHeight },\r\n                    { x: this.pageWidth, y: this.pageHeight },\r\n                ]\r\n            );\r\n        }\r\n    }\r\n\r\n    private checkPositionAtCenterLine(\r\n        checkedPos: Point,\r\n        centerOne: Point,\r\n        centerTwo: Point\r\n    ): Point {\r\n        let result = checkedPos;\r\n\r\n        const tmp = Helper.LimitPointToCircle(centerOne, this.pageWidth, result);\r\n        if (result !== tmp) {\r\n            result = tmp;\r\n            this.updateAngleAndGeometry(result);\r\n        }\r\n\r\n        const rad = Math.sqrt(Math.pow(this.pageWidth, 2) + Math.pow(this.pageHeight, 2));\r\n\r\n        let checkPointOne = this.rect.bottomRight;\r\n        let checkPointTwo = this.rect.topLeft;\r\n\r\n        if (this.corner === FlipCorner.BOTTOM) {\r\n            checkPointOne = this.rect.topRight;\r\n            checkPointTwo = this.rect.bottomLeft;\r\n        }\r\n\r\n        if (checkPointOne.x <= 0) {\r\n            const bottomPoint = Helper.LimitPointToCircle(centerTwo, rad, checkPointTwo);\r\n\r\n            if (bottomPoint !== result) {\r\n                result = bottomPoint;\r\n                this.updateAngleAndGeometry(result);\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    private getSegmentToShadowLine(): Segment {\r\n        const first = this.getShadowStartPoint();\r\n\r\n        const second =\r\n            first !== this.sideIntersectPoint && this.sideIntersectPoint !== null\r\n                ? this.sideIntersectPoint\r\n                : this.bottomIntersectPoint;\r\n\r\n        return [first, second];\r\n    }\r\n}\r\n","/**\r\n * Book size calculation type\r\n */\r\nexport enum SizeType {\r\n  /** Dimensions are fixed */\r\n  FIXED = 'fixed',\r\n  /** Dimensions are calculated based on the parent element */\r\n  STRETCH = 'stretch',\r\n}\r\n\r\n/**\r\n * Configuration object\r\n */\r\nexport interface FlipSetting {\r\n  /** Page number from which to start viewing */\r\n  startPage: number;\r\n  /** Whether the book will be stretched under the parent element or not */\r\n  size: SizeType;\r\n\r\n  width: number;\r\n  height: number;\r\n\r\n  minWidth: number;\r\n  maxWidth: number;\r\n  minHeight: number;\r\n  maxHeight: number;\r\n\r\n  /** Draw shadows or not when page flipping */\r\n  drawShadow: boolean;\r\n  /** Flipping animation time */\r\n  flippingTime: number;\r\n\r\n  /** Enable switching to portrait mode */\r\n  usePortrait: boolean;\r\n  /** Initial value to z-index */\r\n  startZIndex: number;\r\n  /** If this value is true, the parent element will be equal to the size of the book */\r\n  autoSize: boolean;\r\n  /** Shadow intensity (1: max intensity, 0: hidden shadows) */\r\n  maxShadowOpacity: number;\r\n\r\n  /** If this value is true, the first and the last pages will be marked as hard and will be shown in single page mode */\r\n  showCover: boolean;\r\n  /** Disable content scrolling when touching a book on mobile devices */\r\n  mobileScrollSupport: boolean;\r\n\r\n  /** Set the forward event of clicking on child elements (e.g. buttons, links) */\r\n  clickEventForward: boolean | string[];\r\n\r\n  /** Using mouse and touch events to page flipping */\r\n  useMouseEvents: boolean;\r\n\r\n  swipeDistance: number;\r\n\r\n  /** if this value is true, fold the corners of the book when the mouse pointer is over them. */\r\n  showPageCorners: boolean;\r\n}\r\n\r\nexport class Settings {\r\n  private _default: FlipSetting = {\r\n    startPage: 0,\r\n    size: SizeType.FIXED,\r\n    width: 0,\r\n    height: 0,\r\n    minWidth: 0,\r\n    maxWidth: 0,\r\n    minHeight: 0,\r\n    maxHeight: 0,\r\n    drawShadow: true,\r\n    flippingTime: 1000,\r\n    usePortrait: true,\r\n    startZIndex: 0,\r\n    autoSize: true,\r\n    maxShadowOpacity: 1,\r\n    showCover: false,\r\n    mobileScrollSupport: true,\r\n    swipeDistance: 30,\r\n    clickEventForward: false,\r\n    useMouseEvents: true,\r\n    showPageCorners: true,\r\n  };\r\n\r\n  /**\r\n   * Processing parameters received from the user. Substitution default values\r\n   *\r\n   * @param userSetting\r\n   * @returns {FlipSetting} Сonfiguration object\r\n   */\r\n  public getSettings(userSetting: Record<string, number | string | boolean>): FlipSetting {\r\n    const result = this._default;\r\n    Object.assign(result, userSetting);\r\n\r\n    if (result.size !== SizeType.STRETCH && result.size !== SizeType.FIXED)\r\n      throw new Error('Invalid size type. Available only \"fixed\" and \"stretch\" value');\r\n\r\n    if (result.width <= 0 || result.height <= 0)\r\n      throw new Error('Invalid width or height');\r\n\r\n    if (result.flippingTime <= 0)\r\n      throw new Error('Invalid flipping time');\r\n\r\n    if (result.size === SizeType.STRETCH) {\r\n      if (result.minWidth <= 0) result.minWidth = 100;\r\n\r\n      if (result.maxWidth < result.minWidth) result.maxWidth = 2000;\r\n\r\n      if (result.minHeight <= 0) result.minHeight = 100;\r\n\r\n      if (result.maxHeight < result.minHeight) result.maxHeight = 2000;\r\n    } else {\r\n      result.minWidth = result.width;\r\n      result.maxWidth = result.width;\r\n      result.minHeight = result.height;\r\n      result.maxHeight = result.height;\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n","import { PageFlip } from '../PageFlip';\r\nimport { Point, PageRect, RectPoints } from '../BasicTypes';\r\nimport { FlipDirection } from '../Flip/Flip';\r\nimport { Page, PageOrientation } from '../Page/Page';\r\nimport { FlipSetting, SizeType } from '../Settings';\r\n\r\ntype FrameAction = () => void;\r\ntype AnimationSuccessAction = () => void;\r\n\r\n/**\r\n * Type describing calculated values for drop shadows\r\n */\r\ntype Shadow = {\r\n  /** Shadow Position Start Point */\r\n  pos: Point;\r\n  /** The angle of the shadows relative to the book */\r\n  angle: number;\r\n  /** Base width shadow */\r\n  width: number;\r\n  /** Base shadow opacity */\r\n  opacity: number;\r\n  /** Flipping Direction, the direction of the shadow gradients */\r\n  direction: FlipDirection;\r\n  /** Flipping progress in percent (0 - 100) */\r\n  progress: number;\r\n};\r\n\r\n/**\r\n * Type describing the animation process\r\n * Only one animation process can be started at a same time\r\n */\r\ntype AnimationProcess = {\r\n  /** List of frames in playback order. Each frame is a function. */\r\n  frames: FrameAction[];\r\n  /** Total animation duration */\r\n  duration: number;\r\n  /** Animation duration of one frame */\r\n  durationFrame: number;\r\n  /** Сallback at the end of the animation */\r\n  onAnimateEnd: AnimationSuccessAction;\r\n  /** Animation start time (Global Timer) */\r\n  startedAt: number;\r\n};\r\n\r\n/**\r\n * Book orientation\r\n */\r\nexport enum Orientation {\r\n  PORTRAIT = 'portrait',\r\n  LANDSCAPE = 'landscape',\r\n}\r\n\r\n/**\r\n * Class responsible for rendering the book\r\n */\r\nexport abstract class Render {\r\n  protected readonly setting: FlipSetting;\r\n  protected readonly app: PageFlip;\r\n\r\n  /** Left static book page */\r\n  protected leftPage: Page = null;\r\n  /** Right static book page */\r\n  protected rightPage: Page = null;\r\n\r\n  /** Page currently flipping */\r\n  protected flippingPage: Page = null;\r\n  /** Next page at the time of flipping */\r\n  protected bottomPage: Page = null;\r\n\r\n  /** Current flipping direction */\r\n  protected direction: FlipDirection = null;\r\n  /** Current book orientation */\r\n  protected orientation: Orientation = null;\r\n  /** Сurrent state of the shadows */\r\n  protected shadow: Shadow = null;\r\n  /** Сurrent animation process */\r\n  protected animation: AnimationProcess = null;\r\n  /** Page borders while flipping */\r\n  protected pageRect: RectPoints = null;\r\n  /** Current book area */\r\n  private boundsRect: PageRect = null;\r\n\r\n  /** Timer started from start of rendering */\r\n  protected timer = 0;\r\n\r\n  /**\r\n   * Safari browser definitions for resolving a bug with a css property clip-area\r\n   *\r\n   * https://bugs.webkit.org/show_bug.cgi?id=126207\r\n   */\r\n  private safari = false;\r\n\r\n  protected constructor(app: PageFlip, setting: FlipSetting) {\r\n    this.setting = setting;\r\n    this.app = app;\r\n\r\n    // detect safari\r\n    const regex = new RegExp('Version\\\\/[\\\\d\\\\.]+.*Safari/');\r\n    this.safari = regex.exec(window.navigator.userAgent) !== null;\r\n  }\r\n\r\n  /**\r\n   * Rendering action on each requestAnimationFrame call. The entire rendering process is performed only in this method\r\n   */\r\n  protected abstract drawFrame(): void;\r\n\r\n  /**\r\n   * Executed when requestAnimationFrame is called. Performs the current animation process and call drawFrame()\r\n   *\r\n   * @param timer\r\n   */\r\n  private render(timer: number): void {\r\n    if (this.animation !== null) {\r\n      // Find current frame of animation\r\n      const frameIndex = Math.round(\r\n        (timer - this.animation.startedAt) / this.animation.durationFrame\r\n      );\r\n\r\n      if (frameIndex < this.animation.frames.length) {\r\n        this.animation.frames[frameIndex]();\r\n      } else {\r\n        this.animation.onAnimateEnd();\r\n        this.animation = null;\r\n      }\r\n    }\r\n\r\n    this.timer = timer;\r\n    this.drawFrame();\r\n  }\r\n\r\n  /**\r\n   * Running requestAnimationFrame, and rendering process\r\n   */\r\n  public start(): void {\r\n    this.update();\r\n\r\n    const loop = (timer: number): void => {\r\n      this.render(timer);\r\n      requestAnimationFrame(loop);\r\n    };\r\n\r\n    requestAnimationFrame(loop);\r\n  }\r\n\r\n  /**\r\n   * Start a new animation process\r\n   *\r\n   * @param {FrameAction[]} frames - Frame list\r\n   * @param {number} duration - total animation duration\r\n   * @param {AnimationSuccessAction} onAnimateEnd - Animation callback function\r\n   */\r\n  public startAnimation(\r\n    frames: FrameAction[],\r\n    duration: number,\r\n    onAnimateEnd: AnimationSuccessAction\r\n  ): void {\r\n    this.finishAnimation(); // finish the previous animation process\r\n\r\n    this.animation = {\r\n      frames,\r\n      duration,\r\n      durationFrame: duration / frames.length,\r\n      onAnimateEnd,\r\n      startedAt: this.timer,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * End the current animation process and call the callback\r\n   */\r\n  public finishAnimation(): void {\r\n    if (this.animation !== null) {\r\n      this.animation.frames[this.animation.frames.length - 1]();\r\n\r\n      if (this.animation.onAnimateEnd !== null) {\r\n        this.animation.onAnimateEnd();\r\n      }\r\n    }\r\n\r\n    this.animation = null;\r\n  }\r\n\r\n  /**\r\n   * Recalculate the size of the displayed area, and update the page orientation\r\n   */\r\n  public update(): void {\r\n    this.boundsRect = null;\r\n    const orientation = this.calculateBoundsRect();\r\n\r\n    if (this.orientation !== orientation) {\r\n      this.orientation = orientation;\r\n      this.app.updateOrientation(orientation);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the size and position of the book depending on the parent element and configuration parameters\r\n   */\r\n  private calculateBoundsRect(): Orientation {\r\n    let orientation = Orientation.LANDSCAPE;\r\n\r\n    const blockWidth = this.getBlockWidth();\r\n    const middlePoint: Point = {\r\n      x: blockWidth / 2,\r\n      y: this.getBlockHeight() / 2,\r\n    };\r\n\r\n    const ratio = this.setting.width / this.setting.height;\r\n\r\n    let pageWidth = this.setting.width;\r\n    let pageHeight = this.setting.height;\r\n\r\n    let left = middlePoint.x - pageWidth;\r\n\r\n    if (this.setting.size === SizeType.STRETCH) {\r\n      if (blockWidth < this.setting.minWidth * 2 && this.app.getSettings().usePortrait)\r\n        orientation = Orientation.PORTRAIT;\r\n\r\n      pageWidth =\r\n        orientation === Orientation.PORTRAIT\r\n          ? this.getBlockWidth()\r\n          : this.getBlockWidth() / 2;\r\n\r\n      if (pageWidth > this.setting.maxWidth) pageWidth = this.setting.maxWidth;\r\n\r\n      pageHeight = pageWidth / ratio;\r\n      if (pageHeight > this.getBlockHeight()) {\r\n        pageHeight = this.getBlockHeight();\r\n        pageWidth = pageHeight * ratio;\r\n      }\r\n\r\n      left =\r\n        orientation === Orientation.PORTRAIT\r\n          ? middlePoint.x - pageWidth / 2 - pageWidth\r\n          : middlePoint.x - pageWidth;\r\n    } else {\r\n      if (blockWidth < pageWidth * 2) {\r\n        if (this.app.getSettings().usePortrait) {\r\n          orientation = Orientation.PORTRAIT;\r\n          left = middlePoint.x - pageWidth / 2 - pageWidth;\r\n        }\r\n      }\r\n    }\r\n\r\n    this.boundsRect = {\r\n      left,\r\n      top: middlePoint.y - pageHeight / 2,\r\n      width: pageWidth * 2,\r\n      height: pageHeight,\r\n      pageWidth: pageWidth,\r\n    };\r\n\r\n    return orientation;\r\n  }\r\n\r\n  /**\r\n   * Set the current parameters of the drop shadow\r\n   *\r\n   * @param {Point} pos - Shadow Position Start Point\r\n   * @param {number} angle - The angle of the shadows relative to the book\r\n   * @param {number} progress - Flipping progress in percent (0 - 100)\r\n   * @param {FlipDirection} direction - Flipping Direction, the direction of the shadow gradients\r\n   */\r\n  public setShadowData(\r\n    pos: Point,\r\n    angle: number,\r\n    progress: number,\r\n    direction: FlipDirection\r\n  ): void {\r\n    if (!this.app.getSettings().drawShadow) return;\r\n\r\n    const maxShadowOpacity = 100 * this.getSettings().maxShadowOpacity;\r\n\r\n    this.shadow = {\r\n      pos,\r\n      angle,\r\n      width: (((this.getRect().pageWidth * 3) / 4) * progress) / 100,\r\n      opacity: ((100 - progress) * maxShadowOpacity) / 100 / 100,\r\n      direction,\r\n      progress: progress * 2,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear shadow\r\n   */\r\n  public clearShadow(): void {\r\n    this.shadow = null;\r\n  }\r\n\r\n  /**\r\n   * Get parent block offset width\r\n   */\r\n  public getBlockWidth(): number {\r\n    return this.app.getUI().getDistElement().offsetWidth;\r\n  }\r\n\r\n  /**\r\n   * Get parent block offset height\r\n   */\r\n  public getBlockHeight(): number {\r\n    return this.app.getUI().getDistElement().offsetHeight;\r\n  }\r\n\r\n  /**\r\n   * Get current flipping direction\r\n   */\r\n  public getDirection(): FlipDirection {\r\n    return this.direction;\r\n  }\r\n\r\n  /**\r\n   * Сurrent size and position of the book\r\n   */\r\n  public getRect(): PageRect {\r\n    if (this.boundsRect === null) this.calculateBoundsRect();\r\n\r\n    return this.boundsRect;\r\n  }\r\n\r\n  /**\r\n   * Get configuration object\r\n   */\r\n  public getSettings(): FlipSetting {\r\n    return this.app.getSettings();\r\n  }\r\n\r\n  /**\r\n   * Get current book orientation\r\n   */\r\n  public getOrientation(): Orientation {\r\n    return this.orientation;\r\n  }\r\n\r\n  /**\r\n   * Set page area while flipping\r\n   *\r\n   * @param direction\r\n   */\r\n  public setPageRect(pageRect: RectPoints): void {\r\n    this.pageRect = pageRect;\r\n  }\r\n\r\n  /**\r\n   * Set flipping direction\r\n   *\r\n   * @param direction\r\n   */\r\n  public setDirection(direction: FlipDirection): void {\r\n    this.direction = direction;\r\n  }\r\n\r\n  /**\r\n   * Set right static book page\r\n   *\r\n   * @param page\r\n   */\r\n  public setRightPage(page: Page): void {\r\n    if (page !== null) page.setOrientation(PageOrientation.RIGHT);\r\n\r\n    this.rightPage = page;\r\n  }\r\n\r\n  /**\r\n   * Set left static book page\r\n   * @param page\r\n   */\r\n  public setLeftPage(page: Page): void {\r\n    if (page !== null) page.setOrientation(PageOrientation.LEFT);\r\n\r\n    this.leftPage = page;\r\n  }\r\n\r\n  /**\r\n   * Set next page at the time of flipping\r\n   * @param page\r\n   */\r\n  public setBottomPage(page: Page): void {\r\n    if (page !== null)\r\n      page.setOrientation(\r\n        this.direction === FlipDirection.BACK ? PageOrientation.LEFT : PageOrientation.RIGHT\r\n      );\r\n\r\n    this.bottomPage = page;\r\n  }\r\n\r\n  /**\r\n   * Set currently flipping page\r\n   *\r\n   * @param page\r\n   */\r\n  public setFlippingPage(page: Page): void {\r\n    if (page !== null)\r\n      page.setOrientation(\r\n        this.direction === FlipDirection.FORWARD &&\r\n          this.orientation !== Orientation.PORTRAIT\r\n          ? PageOrientation.LEFT\r\n          : PageOrientation.RIGHT\r\n      );\r\n\r\n    this.flippingPage = page;\r\n  }\r\n\r\n  /**\r\n   * Coordinate conversion function. Window coordinates -> to book coordinates\r\n   *\r\n   * @param {Point} pos - Global coordinates relative to the window\r\n   * @returns {Point} Coordinates relative to the book\r\n   */\r\n  public convertToBook(pos: Point): Point {\r\n    const rect = this.getRect();\r\n\r\n    return {\r\n      x: pos.x - rect.left,\r\n      y: pos.y - rect.top,\r\n    };\r\n  }\r\n\r\n  public isSafari(): boolean {\r\n    return this.safari;\r\n  }\r\n\r\n  /**\r\n   * Coordinate conversion function. Window coordinates -> to current coordinates of the working page\r\n   *\r\n   * @param {Point} pos - Global coordinates relative to the window\r\n   * @param {FlipDirection} direction  - Current flipping direction\r\n   *\r\n   * @returns {Point} Coordinates relative to the work page\r\n   */\r\n  public convertToPage(pos: Point, direction?: FlipDirection): Point {\r\n    if (!direction) direction = this.direction;\r\n\r\n    const rect = this.getRect();\r\n    const x =\r\n      direction === FlipDirection.FORWARD\r\n        ? pos.x - rect.left - rect.width / 2\r\n        : rect.width / 2 - pos.x + rect.left;\r\n\r\n    return {\r\n      x,\r\n      y: pos.y - rect.top,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Coordinate conversion function. Coordinates relative to the work page -> Window coordinates\r\n   *\r\n   * @param {Point} pos - Coordinates relative to the work page\r\n   * @param {FlipDirection} direction  - Current flipping direction\r\n   *\r\n   * @returns {Point} Global coordinates relative to the window\r\n   */\r\n  public convertToGlobal(pos: Point, direction?: FlipDirection): Point {\r\n    if (!direction) direction = this.direction;\r\n\r\n    if (pos == null) return null;\r\n\r\n    const rect = this.getRect();\r\n\r\n    const x =\r\n      direction === FlipDirection.FORWARD\r\n        ? pos.x + rect.left + rect.width / 2\r\n        : rect.width / 2 - pos.x + rect.left;\r\n\r\n    return {\r\n      x,\r\n      y: pos.y + rect.top,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Casting the coordinates of the corners of the rectangle in the coordinates relative to the window\r\n   *\r\n   * @param {RectPoints} rect - Coordinates of the corners of the rectangle relative to the work page\r\n   * @param {FlipDirection} direction  - Current flipping direction\r\n   *\r\n   * @returns {RectPoints} Coordinates of the corners of the rectangle relative to the window\r\n   */\r\n  public convertRectToGlobal(rect: RectPoints, direction?: FlipDirection): RectPoints {\r\n    if (!direction) direction = this.direction;\r\n\r\n    return {\r\n      topLeft: this.convertToGlobal(rect.topLeft, direction),\r\n      topRight: this.convertToGlobal(rect.topRight, direction),\r\n      bottomLeft: this.convertToGlobal(rect.bottomLeft, direction),\r\n      bottomRight: this.convertToGlobal(rect.bottomRight, direction),\r\n    };\r\n  }\r\n}\r\n","import { Orientation, Render } from '../Render/Render';\r\nimport { Page, PageDensity } from '../Page/Page';\r\nimport { PageFlip } from '../PageFlip';\r\nimport { FlipDirection } from '../Flip/Flip';\r\n\r\ntype NumberArray = number[];\r\n\r\n/**\r\n * Сlass representing a collection of pages\r\n */\r\nexport abstract class PageCollection {\r\n    protected readonly app: PageFlip;\r\n    protected readonly render: Render;\r\n    protected readonly isShowCover: boolean;\r\n\r\n    /** Pages List */\r\n    protected pages: Page[] = [];\r\n    /** Index of the current page in list */\r\n    protected currentPageIndex = 0;\r\n\r\n    /** Number of the current spread in book */\r\n    protected currentSpreadIndex = 0;\r\n    /**  Two-page spread in landscape mode */\r\n    protected landscapeSpread: NumberArray[] = [];\r\n    /**  One-page spread in portrait mode */\r\n    protected portraitSpread: NumberArray[] = [];\r\n\r\n    protected constructor(app: PageFlip, render: Render) {\r\n        this.render = render;\r\n        this.app = app;\r\n\r\n        this.currentPageIndex = 0;\r\n        this.isShowCover = this.app.getSettings().showCover;\r\n    }\r\n\r\n    /**\r\n     * Load pages\r\n     */\r\n    public abstract load(): void;\r\n\r\n    /**\r\n     * Clear pages list\r\n     */\r\n    public destroy(): void {\r\n        this.pages = [];\r\n    }\r\n\r\n    /**\r\n     * Split the book on the two-page spread in landscape mode and one-page spread in portrait mode\r\n     */\r\n    protected createSpread(): void {\r\n        this.landscapeSpread = [];\r\n        this.portraitSpread = [];\r\n\r\n        for (let i = 0; i < this.pages.length; i++) {\r\n            this.portraitSpread.push([i]); // In portrait mode - (one spread = one page)\r\n        }\r\n\r\n        let start = 0;\r\n        if (this.isShowCover) {\r\n            this.pages[0].setDensity(PageDensity.HARD);\r\n            this.landscapeSpread.push([start]);\r\n            start++;\r\n        }\r\n\r\n        for (let i = start; i < this.pages.length; i += 2) {\r\n            if (i < this.pages.length - 1) this.landscapeSpread.push([i, i + 1]);\r\n            else {\r\n                this.landscapeSpread.push([i]);\r\n                this.pages[i].setDensity(PageDensity.HARD);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get spread by mode (portrait or landscape)\r\n     */\r\n    protected getSpread(): NumberArray[] {\r\n        return this.render.getOrientation() === Orientation.LANDSCAPE\r\n            ? this.landscapeSpread\r\n            : this.portraitSpread;\r\n    }\r\n\r\n    /**\r\n     * Get spread index by page number\r\n     * \r\n     * @param {number} pageNum - page index\r\n     */\r\n    public getSpreadIndexByPage(pageNum: number): number {\r\n        const spread = this.getSpread();\r\n\r\n        for (let i = 0; i < spread.length; i++)\r\n            if (pageNum === spread[i][0] || pageNum === spread[i][1]) return i;\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get the total number of pages\r\n     */\r\n    public getPageCount(): number {\r\n        return this.pages.length;\r\n    }\r\n\r\n    /**\r\n     * Get the pages list\r\n     */\r\n    public getPages(): Page[] {\r\n        return this.pages;\r\n    }\r\n\r\n    /**\r\n     * Get page by index\r\n     * \r\n     * @param {number} pageIndex\r\n     */\r\n    public getPage(pageIndex: number): Page {\r\n        if (pageIndex >= 0 && pageIndex < this.pages.length) {\r\n            return this.pages[pageIndex];\r\n        }\r\n\r\n        throw new Error('Invalid page number');\r\n    }\r\n\r\n    /**\r\n     * Get the next page from the specified\r\n     * \r\n     * @param {Page} current \r\n     */\r\n    public nextBy(current: Page): Page {\r\n        const idx = this.pages.indexOf(current);\r\n\r\n        if (idx < this.pages.length - 1) return this.pages[idx + 1];\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get previous page from specified\r\n     * \r\n     * @param {Page} current \r\n     */\r\n    public prevBy(current: Page): Page {\r\n        const idx = this.pages.indexOf(current);\r\n\r\n        if (idx > 0) return this.pages[idx - 1];\r\n\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Get flipping page depending on the direction\r\n     * \r\n     * @param {FlipDirection} direction \r\n     */\r\n    public getFlippingPage(direction: FlipDirection): Page {\r\n        const current = this.currentSpreadIndex;\r\n\r\n        if (this.render.getOrientation() === Orientation.PORTRAIT) {\r\n            return direction === FlipDirection.FORWARD\r\n                ? this.pages[current].newTemporaryCopy()\r\n                : this.pages[current - 1];\r\n        } else {\r\n            const spread =\r\n                direction === FlipDirection.FORWARD\r\n                    ? this.getSpread()[current + 1]\r\n                    : this.getSpread()[current - 1];\r\n\r\n            if (spread.length === 1) return this.pages[spread[0]];\r\n\r\n            return direction === FlipDirection.FORWARD\r\n                ? this.pages[spread[0]]\r\n                : this.pages[spread[1]];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get Next page at the time of flipping\r\n     * \r\n     * @param {FlipDirection}  direction \r\n     */\r\n    public getBottomPage(direction: FlipDirection): Page {\r\n        const current = this.currentSpreadIndex;\r\n\r\n        if (this.render.getOrientation() === Orientation.PORTRAIT) {\r\n            return direction === FlipDirection.FORWARD\r\n                ? this.pages[current + 1]\r\n                : this.pages[current - 1];\r\n        } else {\r\n            const spread =\r\n                direction === FlipDirection.FORWARD\r\n                    ? this.getSpread()[current + 1]\r\n                    : this.getSpread()[current - 1];\r\n\r\n            if (spread.length === 1) return this.pages[spread[0]];\r\n\r\n            return direction === FlipDirection.FORWARD\r\n                ? this.pages[spread[1]]\r\n                : this.pages[spread[0]];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show next spread\r\n     */\r\n    public showNext(): void {\r\n        if (this.currentSpreadIndex < this.getSpread().length) {\r\n            this.currentSpreadIndex++;\r\n            this.showSpread();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show prev spread\r\n     */\r\n    public showPrev(): void {\r\n        if (this.currentSpreadIndex > 0) {\r\n            this.currentSpreadIndex--;\r\n            this.showSpread();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get the number of the current spread in book\r\n     */\r\n    public getCurrentPageIndex(): number {\r\n        return this.currentPageIndex;\r\n    }\r\n\r\n    /**\r\n     * Show specified page\r\n     * @param {number} pageNum - Page index (from 0s)\r\n     */\r\n    public show(pageNum: number = null): void {\r\n        if (pageNum === null) pageNum = this.currentPageIndex;\r\n\r\n        if (pageNum < 0 || pageNum >= this.pages.length) return;\r\n\r\n        const spreadIndex = this.getSpreadIndexByPage(pageNum);\r\n        if (spreadIndex !== null) {\r\n            this.currentSpreadIndex = spreadIndex;\r\n            this.showSpread();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Index of the current page in list\r\n     */\r\n    public getCurrentSpreadIndex(): number {\r\n        return this.currentSpreadIndex;\r\n    }\r\n\r\n    /**\r\n     * Set new spread index as current\r\n     * \r\n     * @param {number} newIndex - new spread index\r\n     */\r\n    public setCurrentSpreadIndex(newIndex: number): void {\r\n        if (newIndex >= 0 && newIndex < this.getSpread().length) {\r\n            this.currentSpreadIndex = newIndex;\r\n        } else {\r\n            throw new Error('Invalid page');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Show current spread\r\n     */\r\n    private showSpread(): void {\r\n        const spread = this.getSpread()[this.currentSpreadIndex];\r\n\r\n        if (spread.length === 2) {\r\n            this.render.setLeftPage(this.pages[spread[0]]);\r\n            this.render.setRightPage(this.pages[spread[1]]);\r\n        } else {\r\n            if (this.render.getOrientation() === Orientation.LANDSCAPE) {\r\n                if (spread[0] === this.pages.length - 1) {\r\n                    this.render.setLeftPage(this.pages[spread[0]]);\r\n                    this.render.setRightPage(null);\r\n                } else {\r\n                    this.render.setLeftPage(null);\r\n                    this.render.setRightPage(this.pages[spread[0]]);\r\n                }\r\n            } else {\r\n                this.render.setLeftPage(null);\r\n                this.render.setRightPage(this.pages[spread[0]]);\r\n            }\r\n        }\r\n\r\n        this.currentPageIndex = spread[0];\r\n        this.app.updatePageIndex(this.currentPageIndex);\r\n    }\r\n}\r\n","import { ImagePage } from '../Page/ImagePage';\r\nimport { Render } from '../Render/Render';\r\nimport { PageCollection } from './PageCollection';\r\nimport { PageFlip } from '../PageFlip';\r\nimport { PageDensity } from '../Page/Page';\r\n\r\n/**\r\n * Сlass representing a collection of pages as images on the canvas\r\n */\r\nexport class ImagePageCollection extends PageCollection {\r\n    private readonly imagesHref: string[];\r\n\r\n    constructor(app: PageFlip, render: Render, imagesHref: string[]) {\r\n        super(app, render);\r\n\r\n        this.imagesHref = imagesHref;\r\n    }\r\n\r\n    public load(): void {\r\n        for (const href of this.imagesHref) {\r\n            const page = new ImagePage(this.render, href, PageDensity.SOFT);\r\n\r\n            page.load();\r\n            this.pages.push(page);\r\n        }\r\n\r\n        this.createSpread();\r\n    }\r\n}\r\n","import { Page, PageDensity, PageOrientation } from './Page';\r\nimport { Render } from '../Render/Render';\r\nimport { Helper } from '../Helper';\r\nimport { FlipDirection } from '../Flip/Flip';\r\nimport { Point } from '../BasicTypes';\r\n\r\n/**\r\n * Class representing a book page as a HTML Element\r\n */\r\nexport class HTMLPage extends Page {\r\n    private readonly element: HTMLElement;\r\n    private copiedElement: HTMLElement = null;\r\n\r\n    private temporaryCopy: Page = null;\r\n\r\n    private isLoad = false;\r\n\r\n    constructor(render: Render, element: HTMLElement, density: PageDensity) {\r\n        super(render, density);\r\n\r\n        this.element = element;\r\n        this.element.classList.add('stf__item');\r\n        this.element.classList.add('--' + density);\r\n    }\r\n\r\n    public newTemporaryCopy(): Page {\r\n        if (this.nowDrawingDensity === PageDensity.HARD) {\r\n            return this;\r\n        }\r\n\r\n        if (this.temporaryCopy === null) {\r\n            this.copiedElement = this.element.cloneNode(true) as HTMLElement;\r\n            this.element.parentElement.appendChild(this.copiedElement);\r\n\r\n            this.temporaryCopy = new HTMLPage(\r\n                this.render,\r\n                this.copiedElement,\r\n                this.nowDrawingDensity\r\n            );\r\n        }\r\n\r\n        return this.getTemporaryCopy();\r\n    }\r\n\r\n    public getTemporaryCopy(): Page {\r\n        return this.temporaryCopy;\r\n    }\r\n\r\n    public hideTemporaryCopy(): void {\r\n        if (this.temporaryCopy !== null) {\r\n            this.copiedElement.remove();\r\n            this.copiedElement = null;\r\n            this.temporaryCopy = null;\r\n        }\r\n    }\r\n\r\n    public draw(tempDensity?: PageDensity): void {\r\n        const density = tempDensity ? tempDensity : this.nowDrawingDensity;\r\n\r\n        const pagePos = this.render.convertToGlobal(this.state.position);\r\n        const pageWidth = this.render.getRect().pageWidth;\r\n        const pageHeight = this.render.getRect().height;\r\n\r\n        this.element.classList.remove('--simple');\r\n\r\n        const commonStyle = `\r\n            display: block;\r\n            z-index: ${this.element.style.zIndex};\r\n            left: 0;\r\n            top: 0;\r\n            width: ${pageWidth}px;\r\n            height: ${pageHeight}px;\r\n        `;\r\n\r\n        density === PageDensity.HARD\r\n            ? this.drawHard(commonStyle)\r\n            : this.drawSoft(pagePos, commonStyle);\r\n    }\r\n\r\n    private drawHard(commonStyle = ''): void {\r\n        const pos = this.render.getRect().left + this.render.getRect().width / 2;\r\n\r\n        const angle = this.state.hardDrawingAngle;\r\n\r\n        const newStyle =\r\n            commonStyle +\r\n            `\r\n                backface-visibility: hidden;\r\n                -webkit-backface-visibility: hidden;\r\n                clip-path: none;\r\n                -webkit-clip-path: none;\r\n            ` +\r\n            (this.orientation === PageOrientation.LEFT\r\n                ? `transform-origin: ${this.render.getRect().pageWidth}px 0; \r\n                   transform: translate3d(0, 0, 0) rotateY(${angle}deg);`\r\n                : `transform-origin: 0 0; \r\n                   transform: translate3d(${pos}px, 0, 0) rotateY(${angle}deg);`);\r\n\r\n        this.element.style.cssText = newStyle;\r\n    }\r\n\r\n    private drawSoft(position: Point, commonStyle = ''): void {\r\n        let polygon = 'polygon( ';\r\n        for (const p of this.state.area) {\r\n            if (p !== null) {\r\n                let g =\r\n                    this.render.getDirection() === FlipDirection.BACK\r\n                        ? {\r\n                              x: -p.x + this.state.position.x,\r\n                              y: p.y - this.state.position.y,\r\n                          }\r\n                        : {\r\n                              x: p.x - this.state.position.x,\r\n                              y: p.y - this.state.position.y,\r\n                          };\r\n\r\n                g = Helper.GetRotatedPoint(g, { x: 0, y: 0 }, this.state.angle);\r\n                polygon += g.x + 'px ' + g.y + 'px, ';\r\n            }\r\n        }\r\n        polygon = polygon.slice(0, -2);\r\n        polygon += ')';\r\n\r\n        const newStyle =\r\n            commonStyle +\r\n            `transform-origin: 0 0; clip-path: ${polygon}; -webkit-clip-path: ${polygon};` +\r\n            (this.render.isSafari() && this.state.angle === 0\r\n                ? `transform: translate(${position.x}px, ${position.y}px);`\r\n                : `transform: translate3d(${position.x}px, ${position.y}px, 0) rotate(${this.state.angle}rad);`);\r\n\r\n        this.element.style.cssText = newStyle;\r\n    }\r\n\r\n    public simpleDraw(orient: PageOrientation): void {\r\n        const rect = this.render.getRect();\r\n\r\n        const pageWidth = rect.pageWidth;\r\n        const pageHeight = rect.height;\r\n\r\n        const x = orient === PageOrientation.RIGHT ? rect.left + rect.pageWidth : rect.left;\r\n\r\n        const y = rect.top;\r\n\r\n        this.element.classList.add('--simple');\r\n        this.element.style.cssText = `\r\n            position: absolute; \r\n            display: block; \r\n            height: ${pageHeight}px; \r\n            left: ${x}px; \r\n            top: ${y}px; \r\n            width: ${pageWidth}px; \r\n            z-index: ${this.render.getSettings().startZIndex + 1};`;\r\n    }\r\n\r\n    public getElement(): HTMLElement {\r\n        return this.element;\r\n    }\r\n\r\n    public load(): void {\r\n        this.isLoad = true;\r\n    }\r\n\r\n    public setOrientation(orientation: PageOrientation): void {\r\n        super.setOrientation(orientation);\r\n        this.element.classList.remove('--left', '--right');\r\n\r\n        this.element.classList.add(orientation === PageOrientation.RIGHT ? '--right' : '--left');\r\n    }\r\n\r\n    public setDrawingDensity(density: PageDensity): void {\r\n        this.element.classList.remove('--soft', '--hard');\r\n        this.element.classList.add('--' + density);\r\n\r\n        super.setDrawingDensity(density);\r\n    }\r\n}\r\n","import { HTMLPage } from '../Page/HTMLPage';\r\nimport { Render } from '../Render/Render';\r\nimport { PageCollection } from './PageCollection';\r\nimport { PageFlip } from '../PageFlip';\r\nimport { PageDensity } from '../Page/Page';\r\n\r\n/**\r\n * Сlass representing a collection of pages as HTML Element\r\n */\r\nexport class HTMLPageCollection extends PageCollection {\r\n    private readonly element: HTMLElement;\r\n    private readonly pagesElement: NodeListOf<HTMLElement> | HTMLElement[];\r\n\r\n    constructor(\r\n        app: PageFlip,\r\n        render: Render,\r\n        element: HTMLElement,\r\n        items: NodeListOf<HTMLElement> | HTMLElement[]\r\n    ) {\r\n        super(app, render);\r\n\r\n        this.element = element;\r\n        this.pagesElement = items;\r\n    }\r\n\r\n    public load(): void {\r\n        for (const pageElement of this.pagesElement) {\r\n            const page = new HTMLPage(\r\n                this.render,\r\n                pageElement,\r\n                pageElement.dataset['density'] === 'hard' ? PageDensity.HARD : PageDensity.SOFT\r\n            );\r\n\r\n            page.load();\r\n            this.pages.push(page);\r\n        }\r\n\r\n        this.createSpread();\r\n    }\r\n}\r\n","import { Orientation, Render } from './Render';\r\nimport { PageFlip } from '../PageFlip';\r\nimport { FlipDirection } from '../Flip/Flip';\r\nimport { PageOrientation } from '../Page/Page';\r\nimport { FlipSetting } from '../Settings';\r\n\r\n/**\r\n * Class responsible for rendering the Canvas book\r\n */\r\nexport class CanvasRender extends Render {\r\n    private readonly canvas: HTMLCanvasElement;\r\n    private readonly ctx: CanvasRenderingContext2D;\r\n\r\n    constructor(app: PageFlip, setting: FlipSetting, inCanvas: HTMLCanvasElement) {\r\n        super(app, setting);\r\n\r\n        this.canvas = inCanvas;\r\n        this.ctx = inCanvas.getContext('2d');\r\n    }\r\n\r\n    public getContext(): CanvasRenderingContext2D {\r\n        return this.ctx;\r\n    }\r\n\r\n    protected drawFrame(): void {\r\n        this.clear();\r\n\r\n        if (this.orientation !== Orientation.PORTRAIT)\r\n            if (this.leftPage != null) this.leftPage.simpleDraw(PageOrientation.LEFT);\r\n\r\n        if (this.rightPage != null) this.rightPage.simpleDraw(PageOrientation.RIGHT);\r\n\r\n        if (this.bottomPage != null) this.bottomPage.draw();\r\n\r\n        this.drawBookShadow();\r\n\r\n        if (this.flippingPage != null) this.flippingPage.draw();\r\n\r\n        if (this.shadow != null) {\r\n            this.drawOuterShadow();\r\n            this.drawInnerShadow();\r\n        }\r\n\r\n        const rect = this.getRect();\r\n\r\n        if (this.orientation === Orientation.PORTRAIT) {\r\n            this.ctx.beginPath();\r\n            this.ctx.rect(rect.left + rect.pageWidth, rect.top, rect.width, rect.height);\r\n            this.ctx.clip();\r\n        }\r\n    }\r\n\r\n    private drawBookShadow(): void {\r\n        const rect = this.getRect();\r\n\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n\r\n        const shadowSize = rect.width / 20;\r\n        this.ctx.rect(rect.left, rect.top, rect.width, rect.height);\r\n\r\n        const shadowPos = { x: rect.left + rect.width / 2 - shadowSize / 2, y: 0 };\r\n        this.ctx.translate(shadowPos.x, shadowPos.y);\r\n\r\n        const outerGradient = this.ctx.createLinearGradient(0, 0, shadowSize, 0);\r\n\r\n        outerGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\r\n        outerGradient.addColorStop(0.4, 'rgba(0, 0, 0, 0.2)');\r\n        outerGradient.addColorStop(0.49, 'rgba(0, 0, 0, 0.1)');\r\n        outerGradient.addColorStop(0.5, 'rgba(0, 0, 0, 0.5)');\r\n        outerGradient.addColorStop(0.51, 'rgba(0, 0, 0, 0.4)');\r\n        outerGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n\r\n        this.ctx.clip();\r\n\r\n        this.ctx.fillStyle = outerGradient;\r\n        this.ctx.fillRect(0, 0, shadowSize, rect.height * 2);\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    private drawOuterShadow(): void {\r\n        const rect = this.getRect();\r\n\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n\r\n        this.ctx.rect(rect.left, rect.top, rect.width, rect.height);\r\n\r\n        const shadowPos = this.convertToGlobal({ x: this.shadow.pos.x, y: this.shadow.pos.y });\r\n        this.ctx.translate(shadowPos.x, shadowPos.y);\r\n\r\n        this.ctx.rotate(Math.PI + this.shadow.angle + Math.PI / 2);\r\n\r\n        const outerGradient = this.ctx.createLinearGradient(0, 0, this.shadow.width, 0);\r\n\r\n        if (this.shadow.direction === FlipDirection.FORWARD) {\r\n            this.ctx.translate(0, -100);\r\n            outerGradient.addColorStop(0, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\r\n            outerGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n        } else {\r\n            this.ctx.translate(-this.shadow.width, -100);\r\n            outerGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\r\n            outerGradient.addColorStop(1, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\r\n        }\r\n\r\n        this.ctx.clip();\r\n\r\n        this.ctx.fillStyle = outerGradient;\r\n        this.ctx.fillRect(0, 0, this.shadow.width, rect.height * 2);\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    private drawInnerShadow(): void {\r\n        const rect = this.getRect();\r\n\r\n        this.ctx.save();\r\n        this.ctx.beginPath();\r\n\r\n        const shadowPos = this.convertToGlobal({ x: this.shadow.pos.x, y: this.shadow.pos.y });\r\n\r\n        const pageRect = this.convertRectToGlobal(this.pageRect);\r\n        this.ctx.moveTo(pageRect.topLeft.x, pageRect.topLeft.y);\r\n        this.ctx.lineTo(pageRect.topRight.x, pageRect.topRight.y);\r\n        this.ctx.lineTo(pageRect.bottomRight.x, pageRect.bottomRight.y);\r\n        this.ctx.lineTo(pageRect.bottomLeft.x, pageRect.bottomLeft.y);\r\n        this.ctx.translate(shadowPos.x, shadowPos.y);\r\n\r\n        this.ctx.rotate(Math.PI + this.shadow.angle + Math.PI / 2);\r\n\r\n        const isw = (this.shadow.width * 3) / 4;\r\n        const innerGradient = this.ctx.createLinearGradient(0, 0, isw, 0);\r\n\r\n        if (this.shadow.direction === FlipDirection.FORWARD) {\r\n            this.ctx.translate(-isw, -100);\r\n\r\n            innerGradient.addColorStop(1, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\r\n            innerGradient.addColorStop(0.9, 'rgba(0, 0, 0, 0.05)');\r\n            innerGradient.addColorStop(0.7, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\r\n            innerGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\r\n        } else {\r\n            this.ctx.translate(0, -100);\r\n\r\n            innerGradient.addColorStop(0, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\r\n            innerGradient.addColorStop(0.1, 'rgba(0, 0, 0, 0.05)');\r\n            innerGradient.addColorStop(0.3, 'rgba(0, 0, 0, ' + this.shadow.opacity + ')');\r\n            innerGradient.addColorStop(1, 'rgba(0, 0, 0, 0)');\r\n        }\r\n\r\n        this.ctx.clip();\r\n\r\n        this.ctx.fillStyle = innerGradient;\r\n        this.ctx.fillRect(0, 0, isw, rect.height * 2);\r\n\r\n        this.ctx.restore();\r\n    }\r\n\r\n    private clear(): void {\r\n        this.ctx.fillStyle = 'white';\r\n        this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\r\n    }\r\n}\r\n","import { PageFlip } from '../PageFlip';\r\nimport { Point } from '../BasicTypes';\r\nimport { FlipSetting, SizeType } from '../Settings';\r\nimport { FlipCorner, FlippingState } from '../Flip/Flip';\r\nimport { Orientation } from '../Render/Render';\r\n\r\ntype SwipeData = {\r\n  point: Point;\r\n  time: number;\r\n};\r\n\r\n/**\r\n * UI Class, represents work with DOM\r\n */\r\nexport abstract class UI {\r\n  protected readonly app: PageFlip;\r\n  protected readonly wrapper: HTMLElement;\r\n  protected distElement: HTMLElement;\r\n\r\n  private touchPoint: SwipeData = null;\r\n  private readonly swipeTimeout = 250;\r\n  private readonly swipeDistance: number;\r\n\r\n  private onResize = (): void => {\r\n    this.update();\r\n  };\r\n\r\n  /**\r\n   * @constructor\r\n   *\r\n   * @param {HTMLElement} inBlock - Root HTML Element\r\n   * @param {PageFlip} app - PageFlip instanse\r\n   * @param {FlipSetting} setting - Configuration object\r\n   */\r\n  protected constructor(inBlock: HTMLElement, app: PageFlip, setting: FlipSetting) {\r\n    inBlock.classList.add('stf__parent');\r\n    // Add first wrapper\r\n    inBlock.insertAdjacentHTML('afterbegin', '<div class=\"stf__wrapper\"></div>');\r\n\r\n    this.wrapper = inBlock.querySelector('.stf__wrapper');\r\n\r\n    this.app = app;\r\n\r\n    const k = this.app.getSettings().usePortrait ? 1 : 2;\r\n\r\n    // Setting block sizes based on configuration\r\n    inBlock.style.minWidth = setting.minWidth * k + 'px';\r\n    inBlock.style.minHeight = setting.minHeight + 'px';\r\n\r\n    if (setting.size === SizeType.FIXED) {\r\n      inBlock.style.minWidth = setting.width * k + 'px';\r\n      inBlock.style.minHeight = setting.height + 'px';\r\n    }\r\n\r\n    if (setting.autoSize) {\r\n      inBlock.style.width = '100%';\r\n      inBlock.style.maxWidth = setting.maxWidth * 2 + 'px';\r\n    }\r\n\r\n    inBlock.style.display = 'block';\r\n\r\n    window.addEventListener('resize', this.onResize, false);\r\n    this.swipeDistance = setting.swipeDistance;\r\n  }\r\n\r\n  /**\r\n   * Destructor. Remove all HTML elements and all event handlers\r\n   */\r\n  public destroy(): void {\r\n    if (this.app.getSettings().useMouseEvents) this.removeHandlers();\r\n\r\n    this.distElement.remove();\r\n    this.wrapper.remove();\r\n  }\r\n\r\n  /**\r\n   * Updating child components when resizing\r\n   */\r\n  public abstract update(): void;\r\n\r\n  /**\r\n   * Get parent element for book\r\n   *\r\n   * @returns {HTMLElement}\r\n   */\r\n  public getDistElement(): HTMLElement {\r\n    return this.distElement;\r\n  }\r\n\r\n  /**\r\n   * Get wrapper element\r\n   *\r\n   * @returns {HTMLElement}\r\n   */\r\n  public getWrapper(): HTMLElement {\r\n    return this.wrapper;\r\n  }\r\n\r\n  /**\r\n   * Updates styles and sizes based on book orientation\r\n   *\r\n   * @param {Orientation} orientation - New book orientation\r\n   */\r\n  public setOrientationStyle(orientation: Orientation): void {\r\n    this.wrapper.classList.remove('--portrait', '--landscape');\r\n\r\n    if (orientation === Orientation.PORTRAIT) {\r\n      if (this.app.getSettings().autoSize)\r\n        this.wrapper.style.paddingBottom =\r\n          (this.app.getSettings().height / this.app.getSettings().width) * 100 + '%';\r\n\r\n      this.wrapper.classList.add('--portrait');\r\n    } else {\r\n      if (this.app.getSettings().autoSize)\r\n        this.wrapper.style.paddingBottom =\r\n          (this.app.getSettings().height / (this.app.getSettings().width * 2)) * 100 +\r\n          '%';\r\n\r\n      this.wrapper.classList.add('--landscape');\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  protected removeHandlers(): void {\r\n    window.removeEventListener('resize', this.onResize);\r\n\r\n    this.distElement.removeEventListener('mousedown', this.onMouseDown);\r\n    this.distElement.removeEventListener('touchstart', this.onTouchStart);\r\n    window.removeEventListener('mousemove', this.onMouseMove);\r\n    window.removeEventListener('touchmove', this.onTouchMove);\r\n    window.removeEventListener('mouseup', this.onMouseUp);\r\n    window.removeEventListener('touchend', this.onTouchEnd);\r\n  }\r\n\r\n  protected setHandlers(): void {\r\n    if (!this.app.getSettings().useMouseEvents) return;\r\n\r\n    this.distElement.addEventListener('mousedown', this.onMouseDown);\r\n    this.distElement.addEventListener('touchstart', this.onTouchStart);\r\n    window.addEventListener('mousemove', this.onMouseMove);\r\n    window.addEventListener('touchmove', this.onTouchMove, {\r\n      passive: !this.app.getSettings().mobileScrollSupport,\r\n    });\r\n    window.addEventListener('mouseup', this.onMouseUp);\r\n    window.addEventListener('touchend', this.onTouchEnd);\r\n  }\r\n\r\n  /**\r\n   * Convert global coordinates to relative book coordinates\r\n   *\r\n   * @param x\r\n   * @param y\r\n   */\r\n  private getMousePos(x: number, y: number): Point {\r\n    const rect = this.distElement.getBoundingClientRect();\r\n\r\n    return {\r\n      x: x - rect.left,\r\n      y: y - rect.top,\r\n    };\r\n  }\r\n\r\n  private checkTarget(target: EventTarget): boolean {\r\n    if (this.app.getSettings().clickEventForward === true) return false;\r\n    if (Array.isArray(this.app.getSettings().clickEventForward)) {\r\n      if ((this.app.getSettings().clickEventForward as string[]).includes((target as HTMLElement).tagName.toLowerCase())) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  private onMouseDown = (e: MouseEvent): void => {\r\n    if (this.checkTarget(e.target)) {\r\n      const pos = this.getMousePos(e.clientX, e.clientY);\r\n\r\n      this.app.startUserTouch(pos);\r\n\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  private onTouchStart = (e: TouchEvent): void => {\r\n    if (this.checkTarget(e.target)) {\r\n      if (e.changedTouches.length > 0) {\r\n        const t = e.changedTouches[0];\r\n        const pos = this.getMousePos(t.clientX, t.clientY);\r\n\r\n        this.touchPoint = {\r\n          point: pos,\r\n          time: Date.now(),\r\n        };\r\n\r\n        // part of swipe detection\r\n        setTimeout(() => {\r\n          if (this.touchPoint !== null) {\r\n            this.app.startUserTouch(pos);\r\n          }\r\n        }, this.swipeTimeout);\r\n\r\n        if (!this.app.getSettings().mobileScrollSupport) e.preventDefault();\r\n      }\r\n    }\r\n  };\r\n\r\n  private onMouseUp = (e: MouseEvent): void => {\r\n    const pos = this.getMousePos(e.clientX, e.clientY);\r\n\r\n    this.app.userStop(pos);\r\n  };\r\n\r\n  private onMouseMove = (e: MouseEvent): void => {\r\n    const pos = this.getMousePos(e.clientX, e.clientY);\r\n\r\n    this.app.userMove(pos, false);\r\n  };\r\n\r\n  private onTouchMove = (e: TouchEvent): void => {\r\n    if (e.changedTouches.length > 0) {\r\n      const t = e.changedTouches[0];\r\n      const pos = this.getMousePos(t.clientX, t.clientY);\r\n\r\n      if (this.app.getSettings().mobileScrollSupport) {\r\n        if (this.touchPoint !== null) {\r\n          if (\r\n            Math.abs(this.touchPoint.point.x - pos.x) > 10 ||\r\n            this.app.getState() !== FlippingState.READ\r\n          ) {\r\n            if (e.cancelable) this.app.userMove(pos, true);\r\n          }\r\n        }\r\n\r\n        if (this.app.getState() !== FlippingState.READ) {\r\n          e.preventDefault();\r\n        }\r\n      } else {\r\n        this.app.userMove(pos, true);\r\n      }\r\n    }\r\n  };\r\n\r\n  private onTouchEnd = (e: TouchEvent): void => {\r\n    if (e.changedTouches.length > 0) {\r\n      const t = e.changedTouches[0];\r\n      const pos = this.getMousePos(t.clientX, t.clientY);\r\n      let isSwipe = false;\r\n\r\n      // swipe detection\r\n      if (this.touchPoint !== null) {\r\n        const dx = pos.x - this.touchPoint.point.x;\r\n        const distY = Math.abs(pos.y - this.touchPoint.point.y);\r\n\r\n        if (\r\n          Math.abs(dx) > this.swipeDistance &&\r\n          distY < this.swipeDistance * 2 &&\r\n          Date.now() - this.touchPoint.time < this.swipeTimeout\r\n        ) {\r\n          if (dx > 0) {\r\n            this.app.flipPrev(\r\n              this.touchPoint.point.y < this.app.getRender().getRect().height / 2\r\n                ? FlipCorner.TOP\r\n                : FlipCorner.BOTTOM\r\n            );\r\n          } else {\r\n            this.app.flipNext(\r\n              this.touchPoint.point.y < this.app.getRender().getRect().height / 2\r\n                ? FlipCorner.TOP\r\n                : FlipCorner.BOTTOM\r\n            );\r\n          }\r\n          isSwipe = true;\r\n        }\r\n\r\n        this.touchPoint = null;\r\n      }\r\n\r\n      this.app.userStop(pos, isSwipe);\r\n    }\r\n  };\r\n}\r\n","import {UI} from \"./UI\";\r\nimport {PageFlip} from \"../PageFlip\";\r\nimport {FlipSetting} from \"../Settings\";\r\n\r\n/**\r\n * UI for HTML mode\r\n */\r\nexport class HTMLUI extends UI {\r\n    constructor(inBlock: HTMLElement, app: PageFlip, setting: FlipSetting, items: NodeListOf<HTMLElement> | HTMLElement[]) {\r\n        super(inBlock, app, setting);\r\n\r\n        // Second wrapper to HTML page\r\n        this.wrapper.insertAdjacentHTML('afterbegin', '<div class=\"stf__block\"></div>');\r\n\r\n        this.distElement = inBlock.querySelector('.stf__block');\r\n\r\n        for (const item of items) {\r\n            this.distElement.appendChild(item);\r\n        }\r\n\r\n        this.setHandlers();\r\n    }\r\n\r\n    /**\r\n     * Update page list from HTMLElements\r\n     * \r\n     * @param {(NodeListOf<HTMLElement>|HTMLElement[])} items - List of pages as HTML Element\r\n     */\r\n    public updateItems(items: NodeListOf<HTMLElement> | HTMLElement[]): void {\r\n        this.removeHandlers();\r\n\r\n        this.distElement.innerHTML = \"\";\r\n\r\n        for (const item of items) {\r\n            this.distElement.appendChild(item);\r\n        }\r\n\r\n        this.setHandlers();\r\n    }\r\n\r\n    public update(): void {\r\n        this.app.getRender().update();\r\n    }\r\n}","import {UI} from \"./UI\";\r\nimport {PageFlip} from \"../PageFlip\";\r\nimport {FlipSetting} from \"../Settings\";\r\n\r\n/**\r\n * UI for canvas mode\r\n */\r\nexport class CanvasUI extends UI {\r\n    private readonly canvas: HTMLCanvasElement;\r\n\r\n    constructor(inBlock: HTMLElement, app: PageFlip, setting: FlipSetting) {\r\n        super(inBlock, app, setting);\r\n\r\n        this.wrapper.innerHTML = '<canvas class=\"stf__canvas\"></canvas>';\r\n\r\n        this.canvas = inBlock.querySelectorAll('canvas')[0];\r\n\r\n        this.distElement = this.canvas;\r\n\r\n        this.resizeCanvas();\r\n        this.setHandlers();\r\n    }\r\n\r\n    private resizeCanvas(): void {\r\n        const cs = getComputedStyle(this.canvas);\r\n        const width = parseInt(cs.getPropertyValue('width'), 10);\r\n        const height = parseInt(cs.getPropertyValue('height'), 10);\r\n\r\n        this.canvas.width = width;\r\n        this.canvas.height = height;\r\n    }\r\n\r\n    /**\r\n     * Get canvas element\r\n     */\r\n    public getCanvas(): HTMLCanvasElement {\r\n        return this.canvas;\r\n    }\r\n\r\n    public update(): void {\r\n        this.resizeCanvas();\r\n        this.app.getRender().update();\r\n    }\r\n}","import { PageFlip } from '../PageFlip';\r\n\r\n/**\r\n * Data type passed to the event handler\r\n */\r\nexport type DataType = number | string | boolean | object;\r\n\r\n/**\r\n * Type of object in event handlers\r\n */\r\nexport interface WidgetEvent {\r\n    data: DataType;\r\n    object: PageFlip;\r\n}\r\n\r\ntype EventCallback = (e: WidgetEvent) => void;\r\n\r\n/**\r\n * A class implementing a basic event model\r\n */\r\nexport abstract class EventObject {\r\n    private events = new Map<string, EventCallback[]>();\r\n\r\n    /**\r\n     * Add new event handler\r\n     *\r\n     * @param {string} eventName\r\n     * @param {EventCallback} callback\r\n     */\r\n    public on(eventName: string, callback: EventCallback): EventObject {\r\n        if (!this.events.has(eventName)) {\r\n            this.events.set(eventName, [callback]);\r\n        } else {\r\n            this.events.get(eventName).push(callback);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Removing all handlers from an event\r\n     *\r\n     * @param {string} event - Event name\r\n     */\r\n    public off(event: string): void {\r\n        this.events.delete(event);\r\n    }\r\n\r\n    protected trigger(eventName: string, app: PageFlip, data: DataType = null): void {\r\n        if (!this.events.has(eventName)) return;\r\n\r\n        for (const callback of this.events.get(eventName)) {\r\n            callback({ data, object: app });\r\n        }\r\n    }\r\n}\r\n","import { Orientation, Render } from './Render';\r\nimport { PageFlip } from '../PageFlip';\r\nimport { FlipDirection } from '../Flip/Flip';\r\nimport { PageDensity, PageOrientation } from '../Page/Page';\r\nimport { HTMLPage } from '../Page/HTMLPage';\r\nimport { Helper } from '../Helper';\r\nimport { FlipSetting } from '../Settings';\r\n\r\n/**\r\n * Class responsible for rendering the HTML book\r\n */\r\nexport class HTMLRender extends Render {\r\n    /** Parent HTML Element */\r\n    private readonly element: HTMLElement;\r\n\r\n    /** Pages List as HTMLElements */\r\n    private readonly items: NodeListOf<HTMLElement> | HTMLElement[];\r\n\r\n    private outerShadow: HTMLElement = null;\r\n    private innerShadow: HTMLElement = null;\r\n    private hardShadow: HTMLElement = null;\r\n    private hardInnerShadow: HTMLElement = null;\r\n\r\n    /**\r\n     * @constructor\r\n     *\r\n     * @param {PageFlip} app - PageFlip object\r\n     * @param {FlipSetting} setting - Configuration object\r\n     * @param {HTMLElement} element - Parent HTML Element\r\n     */\r\n    constructor(\r\n        app: PageFlip,\r\n        setting: FlipSetting,\r\n        element: HTMLElement\r\n    ) {\r\n        super(app, setting);\r\n\r\n        this.element = element;\r\n\r\n        this.createShadows();\r\n    }\r\n\r\n    private createShadows(): void {\r\n        this.element.insertAdjacentHTML(\r\n            'beforeend',\r\n            `<div class=\"stf__outerShadow\"></div>\r\n             <div class=\"stf__innerShadow\"></div>\r\n             <div class=\"stf__hardShadow\"></div>\r\n             <div class=\"stf__hardInnerShadow\"></div>`\r\n        );\r\n\r\n        this.outerShadow = this.element.querySelector('.stf__outerShadow');\r\n        this.innerShadow = this.element.querySelector('.stf__innerShadow');\r\n        this.hardShadow = this.element.querySelector('.stf__hardShadow');\r\n        this.hardInnerShadow = this.element.querySelector('.stf__hardInnerShadow');\r\n    }\r\n\r\n    public clearShadow(): void {\r\n        super.clearShadow();\r\n\r\n        this.outerShadow.style.cssText = 'display: none';\r\n        this.innerShadow.style.cssText = 'display: none';\r\n        this.hardShadow.style.cssText = 'display: none';\r\n        this.hardInnerShadow.style.cssText = 'display: none';\r\n    }\r\n\r\n    /**\r\n     * Draw inner shadow to the hard page\r\n     */\r\n    private drawHardInnerShadow(): void {\r\n        const rect = this.getRect();\r\n\r\n        const progress =\r\n            this.shadow.progress > 100 ? 200 - this.shadow.progress : this.shadow.progress;\r\n\r\n        let innerShadowSize = ((100 - progress) * (2.5 * rect.pageWidth)) / 100 + 20;\r\n        if (innerShadowSize > rect.pageWidth) innerShadowSize = rect.pageWidth;\r\n\r\n        let newStyle = `\r\n            display: block;\r\n            z-index: ${(this.getSettings().startZIndex + 5).toString(10)};\r\n            width: ${innerShadowSize}px;\r\n            height: ${rect.height}px;\r\n            background: linear-gradient(to right,\r\n                rgba(0, 0, 0, ${(this.shadow.opacity * progress) / 100}) 5%,\r\n                rgba(0, 0, 0, 0) 100%);\r\n            left: ${rect.left + rect.width / 2}px;\r\n            transform-origin: 0 0;\r\n        `;\r\n\r\n        newStyle +=\r\n            (this.getDirection() === FlipDirection.FORWARD && this.shadow.progress > 100) ||\r\n            (this.getDirection() === FlipDirection.BACK && this.shadow.progress <= 100)\r\n                ? `transform: translate3d(0, 0, 0);`\r\n                : `transform: translate3d(0, 0, 0) rotateY(180deg);`;\r\n\r\n        this.hardInnerShadow.style.cssText = newStyle;\r\n    }\r\n\r\n    /**\r\n     * Draw outer shadow to the hard page\r\n     */\r\n    private drawHardOuterShadow(): void {\r\n        const rect = this.getRect();\r\n\r\n        const progress =\r\n            this.shadow.progress > 100 ? 200 - this.shadow.progress : this.shadow.progress;\r\n\r\n        let shadowSize = ((100 - progress) * (2.5 * rect.pageWidth)) / 100 + 20;\r\n        if (shadowSize > rect.pageWidth) shadowSize = rect.pageWidth;\r\n\r\n        let newStyle = `\r\n            display: block;\r\n            z-index: ${(this.getSettings().startZIndex + 4).toString(10)};\r\n            width: ${shadowSize}px;\r\n            height: ${rect.height}px;\r\n            background: linear-gradient(to left, rgba(0, 0, 0, ${\r\n                this.shadow.opacity\r\n            }) 5%, rgba(0, 0, 0, 0) 100%);\r\n            left: ${rect.left + rect.width / 2}px;\r\n            transform-origin: 0 0;\r\n        `;\r\n\r\n        newStyle +=\r\n            (this.getDirection() === FlipDirection.FORWARD && this.shadow.progress > 100) ||\r\n            (this.getDirection() === FlipDirection.BACK && this.shadow.progress <= 100)\r\n                ? `transform: translate3d(0, 0, 0) rotateY(180deg);`\r\n                : `transform: translate3d(0, 0, 0);`;\r\n\r\n        this.hardShadow.style.cssText = newStyle;\r\n    }\r\n\r\n    /**\r\n     * Draw inner shadow to the soft page\r\n     */\r\n    private drawInnerShadow(): void {\r\n        const rect = this.getRect();\r\n\r\n        const innerShadowSize = (this.shadow.width * 3) / 4;\r\n        const shadowTranslate = this.getDirection() === FlipDirection.FORWARD ? innerShadowSize : 0;\r\n\r\n        const shadowDirection =\r\n            this.getDirection() === FlipDirection.FORWARD ? 'to left' : 'to right';\r\n\r\n        const shadowPos = this.convertToGlobal(this.shadow.pos);\r\n\r\n        const angle = this.shadow.angle + (3 * Math.PI) / 2;\r\n\r\n        const clip = [\r\n            this.pageRect.topLeft,\r\n            this.pageRect.topRight,\r\n            this.pageRect.bottomRight,\r\n            this.pageRect.bottomLeft,\r\n        ];\r\n\r\n        let polygon = 'polygon( ';\r\n        for (const p of clip) {\r\n            let g =\r\n                this.getDirection() === FlipDirection.BACK\r\n                    ? {\r\n                          x: -p.x + this.shadow.pos.x,\r\n                          y: p.y - this.shadow.pos.y,\r\n                      }\r\n                    : {\r\n                          x: p.x - this.shadow.pos.x,\r\n                          y: p.y - this.shadow.pos.y,\r\n                      };\r\n\r\n            g = Helper.GetRotatedPoint(g, { x: shadowTranslate, y: 100 }, angle);\r\n\r\n            polygon += g.x + 'px ' + g.y + 'px, ';\r\n        }\r\n        polygon = polygon.slice(0, -2);\r\n        polygon += ')';\r\n\r\n        const newStyle = `\r\n            display: block;\r\n            z-index: ${(this.getSettings().startZIndex + 10).toString(10)};\r\n            width: ${innerShadowSize}px;\r\n            height: ${rect.height * 2}px;\r\n            background: linear-gradient(${shadowDirection},\r\n                rgba(0, 0, 0, ${this.shadow.opacity}) 5%,\r\n                rgba(0, 0, 0, 0.05) 15%,\r\n                rgba(0, 0, 0, ${this.shadow.opacity}) 35%,\r\n                rgba(0, 0, 0, 0) 100%);\r\n            transform-origin: ${shadowTranslate}px 100px;\r\n            transform: translate3d(${shadowPos.x - shadowTranslate}px, ${\r\n            shadowPos.y - 100\r\n        }px, 0) rotate(${angle}rad);\r\n            clip-path: ${polygon};\r\n            -webkit-clip-path: ${polygon};\r\n        `;\r\n\r\n        this.innerShadow.style.cssText = newStyle;\r\n    }\r\n\r\n    /**\r\n     * Draw outer shadow to the soft page\r\n     */\r\n    private drawOuterShadow(): void {\r\n        const rect = this.getRect();\r\n\r\n        const shadowPos = this.convertToGlobal({ x: this.shadow.pos.x, y: this.shadow.pos.y });\r\n\r\n        const angle = this.shadow.angle + (3 * Math.PI) / 2;\r\n        const shadowTranslate = this.getDirection() === FlipDirection.BACK ? this.shadow.width : 0;\r\n\r\n        const shadowDirection =\r\n            this.getDirection() === FlipDirection.FORWARD ? 'to right' : 'to left';\r\n\r\n        const clip = [\r\n            { x: 0, y: 0 },\r\n            { x: rect.pageWidth, y: 0 },\r\n            { x: rect.pageWidth, y: rect.height },\r\n            { x: 0, y: rect.height },\r\n        ];\r\n\r\n        let polygon = 'polygon( ';\r\n        for (const p of clip) {\r\n            if (p !== null) {\r\n                let g =\r\n                    this.getDirection() === FlipDirection.BACK\r\n                        ? {\r\n                              x: -p.x + this.shadow.pos.x,\r\n                              y: p.y - this.shadow.pos.y,\r\n                          }\r\n                        : {\r\n                              x: p.x - this.shadow.pos.x,\r\n                              y: p.y - this.shadow.pos.y,\r\n                          };\r\n\r\n                g = Helper.GetRotatedPoint(g, { x: shadowTranslate, y: 100 }, angle);\r\n\r\n                polygon += g.x + 'px ' + g.y + 'px, ';\r\n            }\r\n        }\r\n\r\n        polygon = polygon.slice(0, -2);\r\n        polygon += ')';\r\n\r\n        const newStyle = `\r\n            display: block;\r\n            z-index: ${(this.getSettings().startZIndex + 10).toString(10)};\r\n            width: ${this.shadow.width}px;\r\n            height: ${rect.height * 2}px;\r\n            background: linear-gradient(${shadowDirection}, rgba(0, 0, 0, ${\r\n            this.shadow.opacity\r\n        }), rgba(0, 0, 0, 0));\r\n            transform-origin: ${shadowTranslate}px 100px;\r\n            transform: translate3d(${shadowPos.x - shadowTranslate}px, ${\r\n            shadowPos.y - 100\r\n        }px, 0) rotate(${angle}rad);\r\n            clip-path: ${polygon};\r\n            -webkit-clip-path: ${polygon};\r\n        `;\r\n\r\n        this.outerShadow.style.cssText = newStyle;\r\n    }\r\n\r\n    /**\r\n     * Draw left static page\r\n     */\r\n    private drawLeftPage(): void {\r\n        if (this.orientation === Orientation.PORTRAIT || this.leftPage === null) return;\r\n\r\n        if (\r\n            this.direction === FlipDirection.BACK &&\r\n            this.flippingPage !== null &&\r\n            this.flippingPage.getDrawingDensity() === PageDensity.HARD\r\n        ) {\r\n            (this.leftPage as HTMLPage).getElement().style.zIndex = (\r\n                this.getSettings().startZIndex + 5\r\n            ).toString(10);\r\n\r\n            this.leftPage.setHardDrawingAngle(180 + this.flippingPage.getHardAngle());\r\n            this.leftPage.draw(this.flippingPage.getDrawingDensity());\r\n        } else {\r\n            this.leftPage.simpleDraw(PageOrientation.LEFT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw right static page\r\n     */\r\n    private drawRightPage(): void {\r\n        if (this.rightPage === null) return;\r\n\r\n        if (\r\n            this.direction === FlipDirection.FORWARD &&\r\n            this.flippingPage !== null &&\r\n            this.flippingPage.getDrawingDensity() === PageDensity.HARD\r\n        ) {\r\n            (this.rightPage as HTMLPage).getElement().style.zIndex = (\r\n                this.getSettings().startZIndex + 5\r\n            ).toString(10);\r\n\r\n            this.rightPage.setHardDrawingAngle(180 + this.flippingPage.getHardAngle());\r\n            this.rightPage.draw(this.flippingPage.getDrawingDensity());\r\n        } else {\r\n            this.rightPage.simpleDraw(PageOrientation.RIGHT);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Draw the next page at the time of flipping\r\n     */\r\n    private drawBottomPage(): void {\r\n        if (this.bottomPage === null) return;\r\n\r\n        const tempDensity =\r\n            this.flippingPage != null ? this.flippingPage.getDrawingDensity() : null;\r\n\r\n        if (!(this.orientation === Orientation.PORTRAIT && this.direction === FlipDirection.BACK)) {\r\n            (this.bottomPage as HTMLPage).getElement().style.zIndex = (\r\n                this.getSettings().startZIndex + 3\r\n            ).toString(10);\r\n\r\n            this.bottomPage.draw(tempDensity);\r\n        }\r\n    }\r\n\r\n    protected drawFrame(): void {\r\n        this.clear();\r\n\r\n        this.drawLeftPage();\r\n\r\n        this.drawRightPage();\r\n\r\n        this.drawBottomPage();\r\n\r\n        if (this.flippingPage != null) {\r\n            (this.flippingPage as HTMLPage).getElement().style.zIndex = (\r\n                this.getSettings().startZIndex + 5\r\n            ).toString(10);\r\n\r\n            this.flippingPage.draw();\r\n        }\r\n\r\n        if (this.shadow != null && this.flippingPage !== null) {\r\n            if (this.flippingPage.getDrawingDensity() === PageDensity.SOFT) {\r\n                this.drawOuterShadow();\r\n                this.drawInnerShadow();\r\n            } else {\r\n                this.drawHardOuterShadow();\r\n                this.drawHardInnerShadow();\r\n            }\r\n        }\r\n    }\r\n\r\n    private clear(): void {\r\n        for (const page of this.app.getPageCollection().getPages()) {\r\n            if (\r\n                page !== this.leftPage &&\r\n                page !== this.rightPage &&\r\n                page !== this.flippingPage &&\r\n                page !== this.bottomPage\r\n            ) {\r\n                (page as HTMLPage).getElement().style.cssText = 'display: none';\r\n            }\r\n\r\n            if (page.getTemporaryCopy() !== this.flippingPage) {\r\n                page.hideTemporaryCopy();\r\n            }\r\n        }\r\n    }\r\n\r\n    public update(): void {\r\n        super.update();\r\n\r\n        if (this.rightPage !== null) {\r\n            this.rightPage.setOrientation(PageOrientation.RIGHT);\r\n        }\r\n\r\n        if (this.leftPage !== null) {\r\n            this.leftPage.setOrientation(PageOrientation.LEFT);\r\n        }\r\n    }\r\n}\r\n","import { PageCollection } from './Collection/PageCollection';\r\nimport { ImagePageCollection } from './Collection/ImagePageCollection';\r\nimport { HTMLPageCollection } from './Collection/HTMLPageCollection';\r\nimport { PageRect, Point } from './BasicTypes';\r\nimport { Flip, FlipCorner, FlippingState } from './Flip/Flip';\r\nimport { Orientation, Render } from './Render/Render';\r\nimport { CanvasRender } from './Render/CanvasRender';\r\nimport { HTMLUI } from './UI/HTMLUI';\r\nimport { CanvasUI } from './UI/CanvasUI';\r\nimport { Helper } from './Helper';\r\nimport { Page } from './Page/Page';\r\nimport { EventObject } from './Event/EventObject';\r\nimport { HTMLRender } from './Render/HTMLRender';\r\nimport { FlipSetting, Settings } from './Settings';\r\nimport { UI } from './UI/UI';\r\n\r\nimport './Style/stPageFlip.css';\r\n\r\n/**\r\n * Class representing a main PageFlip object\r\n *\r\n * @extends EventObject\r\n */\r\nexport class PageFlip extends EventObject {\r\n    private mousePosition: Point;\r\n    private isUserTouch = false;\r\n    private isUserMove = false;\r\n\r\n    private readonly setting: FlipSetting = null;\r\n    private readonly block: HTMLElement; // Root HTML Element\r\n\r\n    private pages: PageCollection = null;\r\n    private flipController: Flip;\r\n    private render: Render;\r\n\r\n    private ui: UI;\r\n\r\n    /**\r\n     * Create a new PageFlip instance\r\n     *\r\n     * @constructor\r\n     * @param {HTMLElement} inBlock - Root HTML Element\r\n     * @param {Object} setting - Configuration object\r\n     */\r\n    constructor(inBlock: HTMLElement, setting: Record<string, number | string | boolean>) {\r\n        super();\r\n\r\n        this.setting = new Settings().getSettings(setting);\r\n        this.block = inBlock;\r\n    }\r\n\r\n    /**\r\n     * Destructor. Remove a root HTML element and all event handlers\r\n     */\r\n    public destroy(): void {\r\n        this.ui.destroy();\r\n        this.block.remove();\r\n    }\r\n\r\n    /**\r\n     * Update the render area. Re-show current page.\r\n     */\r\n    public update(): void {\r\n        this.render.update();\r\n        this.pages.show();\r\n    }\r\n\r\n    /**\r\n     * Load pages from images on the Canvas mode\r\n     *\r\n     * @param {string[]} imagesHref - List of paths to images\r\n     */\r\n    public loadFromImages(imagesHref: string[]): void {\r\n        this.ui = new CanvasUI(this.block, this, this.setting);\r\n\r\n        const canvas = (this.ui as CanvasUI).getCanvas();\r\n        this.render = new CanvasRender(this, this.setting, canvas);\r\n\r\n        this.flipController = new Flip(this.render, this);\r\n\r\n        this.pages = new ImagePageCollection(this, this.render, imagesHref);\r\n        this.pages.load();\r\n\r\n        this.render.start();\r\n\r\n        this.pages.show(this.setting.startPage);\r\n\r\n        // safari fix\r\n        setTimeout(() => {\r\n            this.ui.update();\r\n            this.trigger('init', this, {\r\n                page: this.setting.startPage,\r\n                mode: this.render.getOrientation(),\r\n            });\r\n        }, 1);\r\n    }\r\n\r\n    /**\r\n     * Load pages from HTML elements on the HTML mode\r\n     *\r\n     * @param {(NodeListOf<HTMLElement>|HTMLElement[])} items - List of pages as HTML Element\r\n     */\r\n    public loadFromHTML(items: NodeListOf<HTMLElement> | HTMLElement[]): void {\r\n        this.ui = new HTMLUI(this.block, this, this.setting, items);\r\n\r\n        this.render = new HTMLRender(this, this.setting, this.ui.getDistElement());\r\n\r\n        this.flipController = new Flip(this.render, this);\r\n\r\n        this.pages = new HTMLPageCollection(this, this.render, this.ui.getDistElement(), items);\r\n        this.pages.load();\r\n\r\n        this.render.start();\r\n\r\n        this.pages.show(this.setting.startPage);\r\n\r\n        // safari fix\r\n        setTimeout(() => {\r\n            this.ui.update();\r\n            this.trigger('init', this, {\r\n                page: this.setting.startPage,\r\n                mode: this.render.getOrientation(),\r\n            });\r\n        }, 1);\r\n    }\r\n\r\n    /**\r\n     * Update current pages from images\r\n     *\r\n     * @param {string[]} imagesHref - List of paths to images\r\n     */\r\n    public updateFromImages(imagesHref: string[]): void {\r\n        const current = this.pages.getCurrentPageIndex();\r\n\r\n        this.pages.destroy();\r\n        this.pages = new ImagePageCollection(this, this.render, imagesHref);\r\n        this.pages.load();\r\n\r\n        this.pages.show(current);\r\n        this.trigger('update', this, {\r\n            page: current,\r\n            mode: this.render.getOrientation(),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Update current pages from HTML\r\n     *\r\n     * @param {(NodeListOf<HTMLElement>|HTMLElement[])} items - List of pages as HTML Element\r\n     */\r\n    public updateFromHtml(items: NodeListOf<HTMLElement> | HTMLElement[]): void {\r\n        const current = this.pages.getCurrentPageIndex();\r\n\r\n        this.pages.destroy();\r\n        this.pages = new HTMLPageCollection(this, this.render, this.ui.getDistElement(), items);\r\n        this.pages.load();\r\n        (this.ui as HTMLUI).updateItems(items);\r\n\r\n        this.pages.show(current);\r\n        this.trigger('update', this, {\r\n            page: current,\r\n            mode: this.render.getOrientation(),\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Turn to the previous page (without animation)\r\n     */\r\n    public turnToPrevPage(): void {\r\n        this.pages.showPrev();\r\n    }\r\n\r\n    /**\r\n     * Turn to the next page (without animation)\r\n     */\r\n    public turnToNextPage(): void {\r\n        this.pages.showNext();\r\n    }\r\n\r\n    /**\r\n     * Turn to the specified page number (without animation)\r\n     *\r\n     * @param {number} page - New page number\r\n     */\r\n    public turnToPage(page: number): void {\r\n        this.pages.show(page);\r\n    }\r\n\r\n    /**\r\n     * Turn to the next page (with animation)\r\n     *\r\n     * @param {FlipCorner} corner - Active page corner when turning\r\n     */\r\n    public flipNext(corner: FlipCorner = FlipCorner.TOP): void {\r\n        this.flipController.flipNext(corner);\r\n    }\r\n\r\n    /**\r\n     * Turn to the prev page (with animation)\r\n     *\r\n     * @param {FlipCorner} corner - Active page corner when turning\r\n     */\r\n    public flipPrev(corner: FlipCorner = FlipCorner.TOP): void {\r\n        this.flipController.flipPrev(corner);\r\n    }\r\n\r\n    /**\r\n     * Turn to the specified page number (with animation)\r\n     *\r\n     * @param {number} page - New page number\r\n     * @param {FlipCorner} corner - Active page corner when turning\r\n     */\r\n    public flip(page: number, corner: FlipCorner = FlipCorner.TOP): void {\r\n        this.flipController.flipToPage(page, corner);\r\n    }\r\n\r\n    /**\r\n     * Call a state change event trigger\r\n     *\r\n     * @param {FlippingState} newState - New  state of the object\r\n     */\r\n    public updateState(newState: FlippingState): void {\r\n        this.trigger('changeState', this, newState);\r\n    }\r\n\r\n    /**\r\n     * Call a page number change event trigger\r\n     *\r\n     * @param {number} newPage - New page Number\r\n     */\r\n    public updatePageIndex(newPage: number): void {\r\n        this.trigger('flip', this, newPage);\r\n    }\r\n\r\n    /**\r\n     * Call a page orientation change event trigger. Update UI and rendering area\r\n     *\r\n     * @param {Orientation} newOrientation - New page orientation (portrait, landscape)\r\n     */\r\n    public updateOrientation(newOrientation: Orientation): void {\r\n        this.ui.setOrientationStyle(newOrientation);\r\n        this.update();\r\n        this.trigger('changeOrientation', this, newOrientation);\r\n    }\r\n\r\n    /**\r\n     * Get the total number of pages in a book\r\n     *\r\n     * @returns {number}\r\n     */\r\n    public getPageCount(): number {\r\n        return this.pages.getPageCount();\r\n    }\r\n\r\n    /**\r\n     * Get the index of the current page in the page list (starts at 0)\r\n     *\r\n     * @returns {number}\r\n     */\r\n    public getCurrentPageIndex(): number {\r\n        return this.pages.getCurrentPageIndex();\r\n    }\r\n\r\n    /**\r\n     * Get page from collection by number\r\n     *\r\n     * @param {number} pageIndex\r\n     * @returns {Page}\r\n     */\r\n    public getPage(pageIndex: number): Page {\r\n        return this.pages.getPage(pageIndex);\r\n    }\r\n\r\n    /**\r\n     * Get the current rendering object\r\n     *\r\n     * @returns {Render}\r\n     */\r\n    public getRender(): Render {\r\n        return this.render;\r\n    }\r\n\r\n    /**\r\n     * Get current object responsible for flipping\r\n     *\r\n     * @returns {Flip}\r\n     */\r\n    public getFlipController(): Flip {\r\n        return this.flipController;\r\n    }\r\n\r\n    /**\r\n     * Get current page orientation\r\n     *\r\n     * @returns {Orientation} Сurrent orientation: portrait or landscape\r\n     */\r\n    public getOrientation(): Orientation {\r\n        return this.render.getOrientation();\r\n    }\r\n\r\n    /**\r\n     * Get current book sizes and position\r\n     *\r\n     * @returns {PageRect}\r\n     */\r\n    public getBoundsRect(): PageRect {\r\n        return this.render.getRect();\r\n    }\r\n\r\n    /**\r\n     * Get configuration object\r\n     *\r\n     * @returns {FlipSetting}\r\n     */\r\n    public getSettings(): FlipSetting {\r\n        return this.setting;\r\n    }\r\n\r\n    /**\r\n     * Get UI object\r\n     *\r\n     * @returns {UI}\r\n     */\r\n    public getUI(): UI {\r\n        return this.ui;\r\n    }\r\n\r\n    /**\r\n     * Get current flipping state\r\n     *\r\n     * @returns {FlippingState}\r\n     */\r\n    public getState(): FlippingState {\r\n        return this.flipController.getState();\r\n    }\r\n\r\n    /**\r\n     * Get page collection\r\n     *\r\n     * @returns {PageCollection}\r\n     */\r\n    public getPageCollection(): PageCollection {\r\n        return this.pages;\r\n    }\r\n\r\n    /**\r\n     * Start page turning. Called when a user clicks or touches\r\n     *\r\n     * @param {Point} pos - Touch position in coordinates relative to the book\r\n     */\r\n    public startUserTouch(pos: Point): void {\r\n        this.mousePosition = pos; // Save touch position\r\n        this.isUserTouch = true;\r\n        this.isUserMove = false;\r\n    }\r\n\r\n    /**\r\n     * Called when a finger / mouse moves\r\n     *\r\n     * @param {Point} pos - Touch position in coordinates relative to the book\r\n     * @param {boolean} isTouch - True if there was a touch event, not a mouse click\r\n     */\r\n    public userMove(pos: Point, isTouch: boolean): void {\r\n        if (!this.isUserTouch && !isTouch && this.setting.showPageCorners) {\r\n            this.flipController.showCorner(pos); // fold Page Corner\r\n        } else if (this.isUserTouch) {\r\n            if (Helper.GetDistanceBetweenTwoPoint(this.mousePosition, pos) > 5) {\r\n                this.isUserMove = true;\r\n                this.flipController.fold(pos);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Сalled when the user has stopped touching\r\n     *\r\n     * @param {Point} pos - Touch end position in coordinates relative to the book\r\n     * @param {boolean} isSwipe - true if there was a mobile swipe event\r\n     */\r\n    public userStop(pos: Point, isSwipe = false): void {\r\n        if (this.isUserTouch) {\r\n            this.isUserTouch = false;\r\n\r\n            if (!isSwipe) {\r\n                if (!this.isUserMove) this.flipController.flip(pos);\r\n                else this.flipController.stopMove();\r\n            }\r\n        }\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport { PageFlip } from \"./PageFlip\";\r\n\r\nexport default class HTMLFlipBook extends React.Component {\r\n  componentDidMount() {\r\n    this.pageFlip = new PageFlip(this.el, this.props);\r\n\r\n    this.pageFlip.loadFromHTML(this.childRef);\r\n    this.setHandlers();\r\n  }\r\n\r\n  setHandlers() {\r\n    if (this.props.onFlip)\r\n      this.pageFlip.on(\"flip\", (e) => this.props.onFlip(e));\r\n\r\n    if (this.props.onChangeOrientation)\r\n      this.pageFlip.on(\"changeOrientation\", (e) =>\r\n        this.props.onChangeOrientation(e)\r\n      );\r\n\r\n    if (this.props.onChangeState)\r\n      this.pageFlip.on(\"changeState\", (e) => this.props.onChangeState(e));\r\n\r\n    if (this.props.onInit)\r\n      this.pageFlip.on(\"init\", (e) => this.props.onInit(e));\r\n\r\n    if (this.props.onUpdate)\r\n      this.pageFlip.on(\"update\", (e) => this.props.onUpdate(e));\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.pageFlip.destroy();\r\n    this.pageFlip = null;\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.children !== this.props.children) {\r\n      this.pageFlip.off(\"flip\");\r\n      this.pageFlip.off(\"changeOrientation\");\r\n      this.pageFlip.off(\"changeState\");\r\n      this.pageFlip.off(\"init\");\r\n      this.pageFlip.off(\"update\");\r\n\r\n      this.pageFlip.updateFromHtml(this.childRef);\r\n      this.setHandlers();\r\n    }\r\n  }\r\n\r\n  getPageFlip() {\r\n    return this.pageFlip;\r\n  }\r\n\r\n  render() {\r\n    this.childRef = [];\r\n\r\n    const childWithRef = React.Children.map(this.props.children, (child) => {\r\n      return React.cloneElement(child, {\r\n        ref: (dom) => {\r\n          if (dom) this.childRef.push(dom);\r\n        },\r\n      });\r\n    });\r\n\r\n    return React.createElement(\r\n      \"div\",\r\n      {\r\n        ref: (el) => (this.el = el),\r\n        className: this.props.className,\r\n        style: this.props.style,\r\n      },\r\n      childWithRef\r\n    );\r\n  }\r\n}","import React from \"react\";\r\n// import HTMLFlipBook from \"m-react-pageflip\";\r\nimport HTMLFlipBook from \"./PageFlip/react-pageflip\";\r\nimport \"./DemoBlock.scss\";\r\n\r\nconst PageCover = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div className={\"page page-cover page-cover-\" + props.pos} ref={ref} data-density=\"hard\">\r\n      <div className=\"page-content\">\r\n        <h2>{props.children}</h2>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst Page = React.forwardRef((props, ref) => {\r\n  return (\r\n    <div className=\"page\" ref={ref} data-density={props.density | \"soft\"}>\r\n      <div className=\"page-content\">\r\n        <h2 className=\"page-header\">Page header - {props.number}</h2>\r\n        <div\r\n          className=\"page-image\"\r\n          style={{ backgroundImage: \"url(images/html/\" + props.image + \")\" }}\r\n        ></div>\r\n        <div className=\"page-text\">{props.children}</div>\r\n        <div className=\"page-footer\">{props.number + 1}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nclass DemoBlock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    const pages = [<PageCover key={0} pos=\"top\">BOOK TITLE</PageCover>];\r\n\r\n    let pageNum = 0;\r\n    for (let i = 0; i < 100; i++) {\r\n      pageNum++;\r\n      if (pageNum > 8) pageNum = 1;\r\n      pages.push(<Page key={i + 1} image={(pageNum) + \".jpg\"} number={i + 1}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. In cursus mollis nibh, non convallis ex convallis eu. Suspendisse potenti. Aenean vitae pellentesque erat. Integer non tristique quam. Suspendisse rutrum, augue ac sollicitudin mollis, eros velit viverra metus, a venenatis tellus tellus id magna. Aliquam ac nulla rhoncus, accumsan eros sed, viverra enim. Pellentesque non justo vel nibh sollicitudin pharetra suscipit ut ipsum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. In cursus mollis nibh, non convallis ex convallis eu. Suspendisse potenti. Aenean vitae pellentesque erat. Integer non tristique quam. Suspendisse rutrum, augue ac sollicitudin mollis, eros velit viverra metus, a venenatis tellus tellus id magna.</Page>);\r\n    }\r\n\r\n    pages.push(<PageCover key={101} pos=\"bottom\">THE END</PageCover>);\r\n\r\n    this.state = {\r\n      page: 0,\r\n      totalPage: 0,\r\n      orientation: 'landscape',\r\n      state: 'read',\r\n      pages: pages\r\n    };\r\n  }\r\n\r\n  nextButtonClick = () => {\r\n    this.flipBook.getPageFlip().flipNext();\r\n  }\r\n\r\n  prevButtonClick = () => {\r\n    this.flipBook.getPageFlip().flipPrev();\r\n  }\r\n\r\n  onPage = (e) => {\r\n    this.setState({\r\n      page: e.data,\r\n    });\r\n  }\r\n\r\n  onChangeOrientation = (e) => {\r\n    this.setState({\r\n      orientation: e.data,\r\n    });\r\n  }\r\n\r\n  onChangeState = (e) => {\r\n    this.setState({\r\n      state: e.data,\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      totalPage: this.flipBook.getPageFlip().getPageCount(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"container-md\" style={{ position: \"relative\" }}>\r\n          <HTMLFlipBook\r\n            width={550}\r\n            height={733}\r\n            size=\"stretch\"\r\n            minWidth={315}\r\n            maxWidth={1000}\r\n            minHeight={400}\r\n            maxHeight={1533}\r\n            maxShadowOpacity={0.5}\r\n            showCover={true}\r\n            mobileScrollSupport={true}\r\n\r\n            onFlip={this.onPage}\r\n            onChangeOrientation={this.onChangeOrientation}\r\n            onChangeState={this.onChangeState}\r\n\r\n            className=\"flip-book html-book demo-book\"\r\n            style={{ backgroundImage: \"url(images/background.jpg)\" }}\r\n\r\n            ref={(el) => this.flipBook = el}\r\n          >\r\n            {this.state.pages}\r\n          </HTMLFlipBook>\r\n        </div>\r\n\r\n        <div className=\"container mt-3\">\r\n          <div className=\"row\">\r\n            <div className=\"col-md-6\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-info btn-sm btn-prev\"\r\n                onClick={this.prevButtonClick}\r\n              >\r\n                Previous page\r\n              </button>\r\n                [<span>{this.state.page + 1}</span> of <span>{this.state.totalPage}</span>]\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-info btn-sm btn-next\"\r\n                onClick={this.nextButtonClick}\r\n              >\r\n                Next page\r\n              </button>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n              State: <i>{this.state.state}</i>, orientation: <i>{this.state.orientation}</i>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DemoBlock;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import React from \"react\";\r\n// import HTMLFlipBook from \"react-pageflip\";\r\n// import \"./DemoBlock.scss\";\r\n\r\n// const PageCover = React.forwardRef((props, ref) => {\r\n//   return (\r\n//     <div className={\"page page-cover page-cover-\" + props.pos} ref={ref} data-density=\"hard\">\r\n//       <div className=\"page-content\">\r\n//         <h2>{props.children}</h2>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// });\r\n\r\n// const Page = React.forwardRef((props, ref) => {\r\n//   return (\r\n//     <div className=\"page\" ref={ref} data-density={props.density | \"soft\"}>\r\n//       <div className=\"page-content\">\r\n//         <h2 className=\"page-header\">Page header - {props.number}</h2>\r\n//         <div\r\n//           className=\"page-image\"\r\n//           style={{ backgroundImage: \"url(images/html/\" + props.image + \")\" }}\r\n//         ></div>\r\n//         <div className=\"page-text\">{props.children}</div>\r\n//         <div className=\"page-footer\">{props.number + 1}</div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// });\r\n\r\n// class DemoBlock extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n\r\n//     const pages = [<PageCover key={0} pos=\"top\">BOOK TITLE</PageCover>];\r\n\r\n//     let pageNum = 0;\r\n//     for (let i = 0; i < 100; i++) {\r\n//       pageNum++;\r\n//       if (pageNum > 8) pageNum = 1;\r\n//       pages.push(<Page key={i + 1} image={(pageNum) + \".jpg\"} number={i + 1}>Lorem ipsum dolor sit amet, consectetur adipiscing elit. In cursus mollis nibh, non convallis ex convallis eu. Suspendisse potenti. Aenean vitae pellentesque erat. Integer non tristique quam. Suspendisse rutrum, augue ac sollicitudin mollis, eros velit viverra metus, a venenatis tellus tellus id magna. Aliquam ac nulla rhoncus, accumsan eros sed, viverra enim. Pellentesque non justo vel nibh sollicitudin pharetra suscipit ut ipsum. Lorem ipsum dolor sit amet, consectetur adipiscing elit. In cursus mollis nibh, non convallis ex convallis eu. Suspendisse potenti. Aenean vitae pellentesque erat. Integer non tristique quam. Suspendisse rutrum, augue ac sollicitudin mollis, eros velit viverra metus, a venenatis tellus tellus id magna.</Page>);\r\n//     }\r\n\r\n//     pages.push(<PageCover key={101} pos=\"bottom\">THE END</PageCover>);\r\n\r\n//     this.state = {\r\n//       page: 0,\r\n//       totalPage: 0,\r\n//       orientation: 'landscape',\r\n//       state: 'read',\r\n//       pages: pages\r\n//     };\r\n//   }\r\n\r\n//   nextButtonClick = () => {\r\n//     this.flipBook.getPageFlip().flipNext();\r\n//   }\r\n\r\n//   prevButtonClick = () => {\r\n//     this.flipBook.getPageFlip().flipPrev();\r\n//   }\r\n\r\n//   onPage = (e) => {\r\n//     this.setState({\r\n//       page: e.data,\r\n//     });\r\n//   }\r\n\r\n//   onChangeOrientation = (e) => {\r\n//     this.setState({\r\n//       orientation: e.data,\r\n//     });\r\n//   }\r\n\r\n//   onChangeState = (e) => {\r\n//     this.setState({\r\n//       state: e.data,\r\n//     });\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     this.setState({\r\n//       totalPage: this.flipBook.getPageFlip().getPageCount(),\r\n//     });\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <div>\r\n//         <div className=\"container-md\" style={{ position: \"relative\" }}>\r\n//           <HTMLFlipBook\r\n//             width={550}\r\n//             height={733}\r\n//             size=\"stretch\"\r\n//             minWidth={315}\r\n//             maxWidth={1000}\r\n//             minHeight={400}\r\n//             maxHeight={1533}\r\n//             maxShadowOpacity={0.5}\r\n//             showCover={true}\r\n//             mobileScrollSupport={true}\r\n\r\n//             onFlip={this.onPage}\r\n//             onChangeOrientation={this.onChangeOrientation}\r\n//             onChangeState={this.onChangeState}\r\n\r\n//             className=\"flip-book html-book demo-book\"\r\n//             style={{ backgroundImage: \"url(images/background.jpg)\" }}\r\n\r\n//             ref={(el) => this.flipBook = el}\r\n//           >\r\n//             {this.state.pages}\r\n//           </HTMLFlipBook>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default DemoBlock;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport ImageBook from './ImageBook/ImageBook';\nimport reportWebVitals from './reportWebVitals';\nimport DemoBlock from './DemoBlock';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <DemoBlock /> */}\n    <ImageBook />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}